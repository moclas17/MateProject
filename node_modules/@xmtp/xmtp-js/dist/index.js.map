{"version":3,"sources":["../node_modules/js-sha3/src/sha3.js","../src/utils/topic.ts","../src/utils/async.ts","../src/utils/date.ts","../src/utils/bytes.ts","../src/conversations/Conversation.ts","../src/Stream.ts","../src/crypto/PublicKeyBundle.ts","../src/crypto/PublicKey.ts","../src/crypto/Signature.ts","../src/crypto/PrivateKey.ts","../src/crypto/Ciphertext.ts","../src/crypto/crypto.ts","../src/crypto/encryption.ts","../src/crypto/utils.ts","../src/crypto/PrivateKeyBundle.ts","../src/crypto/errors.ts","../src/crypto/SignedEciesCiphertext.ts","../src/PreparedMessage.ts","../src/utils/keystore.ts","../src/keystore/errors.ts","../src/MessageContent.ts","../src/codecs/Text.ts","../src/Message.ts","../src/Compression.ts","../src/Client.ts","../src/conversations/Conversations.ts","../src/ApiClient.ts","../src/authn/AuthCache.ts","../package.json","../src/constants.ts","../src/ContactBundle.ts","../src/authn/LocalAuthenticator.ts","../src/authn/AuthData.ts","../src/authn/Token.ts","../src/authn/KeystoreAuthenticator.ts","../src/message-backup/NoBackupClient.ts","../src/message-backup/TopicStoreBackupClient.ts","../src/message-backup/BackupClientFactory.ts","../src/keystore/providers/errors.ts","../src/keystore/InMemoryKeystore.ts","../src/Invitation.ts","../src/keystore/encryption.ts","../src/keystore/utils.ts","../src/keystore/InviteStore.ts","../src/crypto/ecies.ts","../src/keystore/persistence/TopicPersistence.ts","../src/keystore/persistence/LocalStoragePonyfill.ts","../src/keystore/persistence/LocalStoragePersistence.ts","../src/keystore/persistence/PrefixedPersistence.ts","../src/keystore/persistence/EncryptedPersistence.ts","../src/keystore/providers/helpers.ts","../src/keystore/providers/NetworkKeyManager.ts","../src/keystore/providers/KeyGeneratorKeystoreProvider.ts","../src/keystore/providers/NetworkKeystoreProvider.ts","../src/keystore/providers/StaticKeystoreProvider.ts","../src/codecs/TypingNotification.ts","../src/codecs/Composite.ts"],"names":["bits","message","createMethod","i","j","utils","proto","publicKey","secp","Long","signature","ciphertext","topic","keystore","messageApi","convo","contact","fetcher","authn","BACKUP_TYPE","b64Decode","invitation","Mutex","privateKey","encrypt","decrypt","req"],"mappings":"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","sourcesContent":["/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","import { utils } from 'ethers'\n\nexport const buildContentTopic = (name: string): string =>\n  `/xmtp/0/${name}/proto`\n\nexport const buildDirectMessageTopic = (\n  sender: string,\n  recipient: string\n): string => {\n  // EIP55 normalize the address case.\n  const members = [utils.getAddress(sender), utils.getAddress(recipient)]\n  members.sort()\n  return buildContentTopic(`dm-${members.join('-')}`)\n}\n\nexport const buildDirectMessageTopicV2 = (randomString: string): string => {\n  return buildContentTopic(`m-${randomString}`)\n}\n\nexport const buildUserContactTopic = (walletAddr: string): string => {\n  // EIP55 normalize the address case.\n  return buildContentTopic(`contact-${utils.getAddress(walletAddr)}`)\n}\n\nexport const buildUserIntroTopic = (walletAddr: string): string => {\n  // EIP55 normalize the address case.\n  return buildContentTopic(`intro-${utils.getAddress(walletAddr)}`)\n}\n\nexport const buildUserInviteTopic = (walletAddr: string): string => {\n  // EIP55 normalize the address case.\n  return buildContentTopic(`invite-${utils.getAddress(walletAddr)}`)\n}\nexport const buildUserPrivateStoreTopic = (addrPrefixedKey: string): string => {\n  // e.g. \"0x1111111111222222222233333333334444444444/key_bundle\"\n  return buildContentTopic(`privatestore-${addrPrefixedKey}`)\n}\n","import { messageApi } from '@xmtp/proto'\n\nexport type IsRetryable = (err?: Error) => boolean\n\nexport const sleep = (ms: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, ms))\n\nexport const promiseWithTimeout = <T>(\n  timeoutMs: number,\n  promise: () => Promise<T>,\n  failureMessage?: string\n): Promise<T> => {\n  let timeoutHandle: NodeJS.Timeout\n  const timeoutPromise = new Promise<never>((_resolve, reject) => {\n    timeoutHandle = setTimeout(\n      () => reject(new Error(failureMessage)),\n      timeoutMs\n    )\n  })\n\n  return Promise.race([promise(), timeoutPromise]).then((result) => {\n    clearTimeout(timeoutHandle)\n    return result\n  })\n}\n\nconst defaultIsRetryableFn = (err?: Error) => !!err\n\n// Implements type safe retries of arbitrary async functions\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function retry<T extends (...arg0: any[]) => any>(\n  fn: T,\n  args: Parameters<T>,\n  maxRetries: number,\n  sleepTime: number,\n  isRetryableFn: IsRetryable = defaultIsRetryableFn,\n  retryCount = 1\n): Promise<Awaited<ReturnType<T>>> {\n  const currRetry = typeof retryCount === 'number' ? retryCount : 1\n  try {\n    const result = await fn(...args)\n    return result\n  } catch (e) {\n    if (!isRetryableFn(e as Error) || currRetry > maxRetries) {\n      throw e\n    }\n    await sleep(sleepTime)\n    return retry(fn, args, maxRetries, sleepTime, isRetryableFn, currRetry + 1)\n  }\n}\n\nexport type EnvelopeMapper<Out> = (env: messageApi.Envelope) => Promise<Out>\n\n// Takes an async generator returning pages of envelopes and converts to an async\n// generator returning pages of an arbitrary type using a mapper function\nexport async function* mapPaginatedStream<Out>(\n  gen: AsyncGenerator<messageApi.Envelope[]>,\n  mapper: EnvelopeMapper<Out>\n): AsyncGenerator<Out[]> {\n  for await (const page of gen) {\n    const results = await Promise.allSettled(page.map(mapper))\n    const out: Out[] = []\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        out.push(result.value)\n      } else {\n        console.warn(\n          'Failed to process envelope due to reason: ',\n          result.reason\n        )\n      }\n    }\n\n    yield out\n  }\n}\n","import Long from 'long'\n\nexport function dateToNs(date: Date): Long {\n  return Long.fromNumber(date.valueOf()).multiply(1_000_000)\n}\n\nexport function nsToDate(ns: Long): Date {\n  return new Date(ns.divide(1_000_000).toNumber())\n}\n\nexport const toNanoString = (d: Date | undefined): undefined | string => {\n  return d && dateToNs(d).toString()\n}\n\nexport const fromNanoString = (s: string | undefined): undefined | Date => {\n  if (!s) {\n    return undefined\n  }\n  return nsToDate(Long.fromString(s))\n}\n","import { fetcher } from '@xmtp/proto'\n\nexport const { b64Decode, b64Encode } = fetcher\n\nexport function concat(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const ab = new Uint8Array(a.length + b.length)\n  ab.set(a)\n  ab.set(b, a.length)\n  return ab\n}\n","import {\n  buildUserIntroTopic,\n  buildDirectMessageTopic,\n  dateToNs,\n  concat,\n  b64Decode,\n  toNanoString,\n} from '../utils'\nimport { utils } from 'ethers'\nimport Stream from '../Stream'\nimport Client, {\n  ListMessagesOptions,\n  ListMessagesPaginatedOptions,\n  SendOptions,\n} from '../Client'\nimport { InvitationContext } from '../Invitation'\nimport { DecodedMessage, MessageV1, MessageV2, decodeContent } from '../Message'\nimport {\n  messageApi,\n  message,\n  content as proto,\n  keystore,\n  ciphertext,\n} from '@xmtp/proto'\nimport {\n  SignedPublicKey,\n  Signature,\n  PublicKeyBundle,\n  SignedPublicKeyBundle,\n} from '../crypto'\nimport { PreparedMessage } from '../PreparedMessage'\nimport { sha256 } from '../crypto/encryption'\nimport { buildDecryptV1Request, getResultOrThrow } from '../utils/keystore'\nimport { ContentTypeText } from '../codecs/Text'\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Conversation represents either a V1 or V2 conversation with a common set of methods.\n */\nexport interface Conversation {\n  /**\n   * The wallet address connected to the client\n   */\n  clientAddress: string\n  /**\n   * A unique identifier for a conversation. Each conversation is stored on the network on one topic\n   */\n  topic: string\n  /**\n   * A unique identifier for ephemeral envelopes for a conversation.\n   */\n  ephemeralTopic: string\n  /**\n   * The wallet address of the other party in the conversation\n   */\n  peerAddress: string\n  /**\n   * Timestamp the conversation was created at\n   */\n  createdAt: Date\n  /**\n   * Optional field containing the `conversationId` and `metadata` for V2 conversations.\n   * Will always be undefined on V1 conversations\n   */\n  context?: InvitationContext | undefined\n\n  /**\n   * Retrieve messages in this conversation. Default to returning all messages.\n   *\n   * If only a subset is required, results can be narrowed by specifying a start/end\n   * timestamp.\n   *\n   * ```ts\n   * // Get all messages in the past 24 hours\n   * const messages = await conversation.messages({\n   *    startTime: new Date(+new Date() - 86_400)\n   * })\n   * ```\n   */\n  messages(opts?: ListMessagesOptions): Promise<DecodedMessage[]>\n  /**\n   * @deprecated\n   */\n  messagesPaginated(\n    opts?: ListMessagesPaginatedOptions\n  ): AsyncGenerator<DecodedMessage[]>\n  /**\n   * Takes a XMTP envelope as input and will decrypt and decode it\n   * returning a `DecodedMessage` instance.\n   */\n  decodeMessage(env: messageApi.Envelope): Promise<DecodedMessage>\n  /**\n   * Return a `Stream` of new messages in this conversation.\n   *\n   * Stream instances are async generators and can be used in\n   * `for await` statements.\n   *\n   * ```ts\n   * for await (const message of await conversation.stream()) {\n   *    console.log(message.content)\n   * }\n   * ```\n   */\n  streamMessages(): Promise<Stream<DecodedMessage>>\n  /**\n   * Send a message into the conversation\n   *\n   * ## Example\n   * ```ts\n   * await conversation.send('Hello world') // returns a `DecodedMessage` instance\n   * ```\n   */\n  send(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<DecodedMessage>\n\n  /**\n   * Return a `PreparedMessage` that has contains the message ID\n   * of the message that will be sent.\n   */\n  prepareMessage(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<PreparedMessage>\n\n  /**\n   * Return a `Stream` of new ephemeral messages from this conversation's\n   * ephemeral topic.\n   *\n   * Stream instances are async generators and can be used in\n   * `for await` statements.\n   *\n   * ```ts\n   * for await (const message of await conversation.streamEphemeral()) {\n   *    console.log(message.content)\n   * }\n   * ```\n   */\n  streamEphemeral(): Promise<Stream<DecodedMessage>>\n}\n\n/**\n * ConversationV1 allows you to view, stream, and send messages to/from a peer address\n */\nexport class ConversationV1 implements Conversation {\n  peerAddress: string\n  createdAt: Date\n  context = undefined\n  private client: Client\n\n  constructor(client: Client, address: string, createdAt: Date) {\n    this.peerAddress = utils.getAddress(address)\n    this.client = client\n    this.createdAt = createdAt\n  }\n\n  get clientAddress() {\n    return this.client.address\n  }\n\n  get topic(): string {\n    return buildDirectMessageTopic(this.peerAddress, this.client.address)\n  }\n\n  get ephemeralTopic(): string {\n    return buildDirectMessageTopic(\n      this.peerAddress,\n      this.client.address\n    ).replace('/xmtp/0/dm-', '/xmtp/0/dmE-')\n  }\n\n  /**\n   * Returns a list of all messages to/from the peerAddress\n   */\n  async messages(opts?: ListMessagesOptions): Promise<DecodedMessage[]> {\n    const topic = buildDirectMessageTopic(this.peerAddress, this.client.address)\n    const messages = await this.client.listEnvelopes(\n      topic,\n      this.processEnvelope.bind(this),\n      opts\n    )\n\n    return this.decryptBatch(messages, topic, false)\n  }\n\n  messagesPaginated(\n    opts?: ListMessagesPaginatedOptions\n  ): AsyncGenerator<DecodedMessage[]> {\n    return this.client.listEnvelopesPaginated(\n      this.topic,\n      // This won't be performant once we start supporting a remote keystore\n      // TODO: Either better batch support or we ditch this under-utilized feature\n      this.decodeMessage.bind(this),\n      opts\n    )\n  }\n\n  // decodeMessage takes an envelope and either returns a `DecodedMessage` or throws if an error occurs\n  async decodeMessage(env: messageApi.Envelope): Promise<DecodedMessage> {\n    if (!env.contentTopic) {\n      throw new Error('Missing content topic')\n    }\n    const msg = await this.processEnvelope(env)\n    const decryptResults = await this.decryptBatch(\n      [msg],\n      env.contentTopic,\n      true\n    )\n    if (!decryptResults.length) {\n      throw new Error('No results')\n    }\n    return decryptResults[0]\n  }\n\n  async prepareMessage(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<PreparedMessage> {\n    let topics: string[]\n    let recipient = await this.client.getUserContact(this.peerAddress)\n    if (!recipient) {\n      throw new Error(`recipient ${this.peerAddress} is not registered`)\n    }\n    if (!(recipient instanceof PublicKeyBundle)) {\n      recipient = recipient.toLegacyBundle()\n    }\n\n    if (!this.client.contacts.has(this.peerAddress)) {\n      topics = [\n        buildUserIntroTopic(this.peerAddress),\n        buildUserIntroTopic(this.client.address),\n        this.topic,\n      ]\n      this.client.contacts.add(this.peerAddress)\n    } else {\n      topics = [this.topic]\n    }\n    const payload = await this.client.encodeContent(content, options)\n    const msg = await this.createMessage(payload, recipient, options?.timestamp)\n\n    const env: messageApi.Envelope = {\n      contentTopic: this.topic,\n      message: msg.toBytes(),\n      timestampNs: toNanoString(msg.sent),\n    }\n\n    return new PreparedMessage(env, async () => {\n      await this.client.publishEnvelopes(\n        topics.map((topic) => ({\n          contentTopic: topic,\n          message: msg.toBytes(),\n          timestamp: msg.sent,\n        }))\n      )\n    })\n  }\n\n  /**\n   * Returns a Stream of any new messages to/from the peerAddress\n   */\n  streamMessages(): Promise<Stream<DecodedMessage>> {\n    return Stream.create<DecodedMessage>(\n      this.client,\n      [this.topic],\n      async (env: messageApi.Envelope) => this.decodeMessage(env)\n    )\n  }\n\n  async processEnvelope({\n    message,\n    contentTopic,\n  }: messageApi.Envelope): Promise<MessageV1> {\n    const messageBytes = b64Decode(message as unknown as string)\n    const decoded = await MessageV1.fromBytes(messageBytes)\n    const { senderAddress, recipientAddress } = decoded\n\n    // Filter for topics\n    if (\n      !senderAddress ||\n      !recipientAddress ||\n      !contentTopic ||\n      buildDirectMessageTopic(senderAddress, recipientAddress) !== this.topic\n    ) {\n      throw new Error('Headers do not match intended recipient')\n    }\n\n    return decoded\n  }\n\n  streamEphemeral(): Promise<Stream<DecodedMessage>> {\n    return Stream.create<DecodedMessage>(\n      this.client,\n      [this.ephemeralTopic],\n      this.decodeMessage.bind(this)\n    )\n  }\n\n  /**\n   * Send a message into the conversation.\n   */\n  async send(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<DecodedMessage> {\n    let topics: string[]\n    let recipient = await this.client.getUserContact(this.peerAddress)\n    if (!recipient) {\n      throw new Error(`recipient ${this.peerAddress} is not registered`)\n    }\n    if (!(recipient instanceof PublicKeyBundle)) {\n      recipient = recipient.toLegacyBundle()\n    }\n\n    const topic = options?.ephemeral ? this.ephemeralTopic : this.topic\n\n    if (!this.client.contacts.has(this.peerAddress)) {\n      topics = [\n        buildUserIntroTopic(this.peerAddress),\n        buildUserIntroTopic(this.client.address),\n        topic,\n      ]\n      this.client.contacts.add(this.peerAddress)\n    } else {\n      topics = [this.topic]\n    }\n    const contentType = options?.contentType || ContentTypeText\n    const payload = await this.client.encodeContent(content, options)\n    const msg = await this.createMessage(payload, recipient, options?.timestamp)\n\n    await this.client.publishEnvelopes(\n      topics.map((topic) => ({\n        contentTopic: topic,\n        message: msg.toBytes(),\n        timestamp: msg.sent,\n      }))\n    )\n\n    return DecodedMessage.fromV1Message(\n      msg,\n      content,\n      contentType,\n      payload,\n      topics[0], // Just use the first topic for the returned value\n      this\n    )\n  }\n\n  async decryptBatch(\n    messages: MessageV1[],\n    topic: string,\n    throwOnError = false\n  ): Promise<DecodedMessage[]> {\n    const responses = (\n      await this.client.keystore.decryptV1(\n        buildDecryptV1Request(messages, this.client.publicKeyBundle)\n      )\n    ).responses\n\n    const out: DecodedMessage[] = []\n    for (let i = 0; i < responses.length; i++) {\n      const result = responses[i]\n      const message = messages[i]\n      try {\n        const { decrypted } = getResultOrThrow(result)\n        out.push(await this.buildDecodedMessage(message, decrypted, topic))\n      } catch (e) {\n        if (throwOnError) {\n          throw e\n        }\n        console.warn('Error decoding content', e)\n      }\n    }\n\n    return out\n  }\n\n  private async buildDecodedMessage(\n    message: MessageV1,\n    decrypted: Uint8Array,\n    topic: string\n  ): Promise<DecodedMessage> {\n    const { content, contentType, error } = await decodeContent(\n      decrypted,\n      this.client\n    )\n    return DecodedMessage.fromV1Message(\n      message,\n      content,\n      contentType,\n      decrypted,\n      topic,\n      this,\n      error\n    )\n  }\n\n  async createMessage(\n    // Payload is expected to be the output of `client.encodeContent`\n    payload: Uint8Array,\n    recipient: PublicKeyBundle,\n    timestamp?: Date\n  ): Promise<MessageV1> {\n    timestamp = timestamp || new Date()\n\n    return MessageV1.encode(\n      this.client.keystore,\n      payload,\n      this.client.publicKeyBundle,\n      recipient,\n      timestamp\n    )\n  }\n}\n\n/**\n * ConversationV2\n */\nexport class ConversationV2 implements Conversation {\n  client: Client\n  topic: string\n  peerAddress: string\n  createdAt: Date\n  context?: InvitationContext\n\n  constructor(\n    client: Client,\n    topic: string,\n    peerAddress: string,\n    createdAt: Date,\n    context: InvitationContext | undefined\n  ) {\n    this.topic = topic\n    this.createdAt = createdAt\n    this.context = context\n    this.client = client\n    this.peerAddress = peerAddress\n  }\n\n  get clientAddress() {\n    return this.client.address\n  }\n\n  /**\n   * Returns a list of all messages to/from the peerAddress\n   */\n  async messages(opts?: ListMessagesOptions): Promise<DecodedMessage[]> {\n    const messages = await this.client.listEnvelopes(\n      this.topic,\n      this.processEnvelope.bind(this),\n      opts\n    )\n\n    return this.decryptBatch(messages, false)\n  }\n\n  messagesPaginated(\n    opts?: ListMessagesPaginatedOptions\n  ): AsyncGenerator<DecodedMessage[]> {\n    return this.client.listEnvelopesPaginated(\n      this.topic,\n      this.decodeMessage.bind(this),\n      opts\n    )\n  }\n\n  get ephemeralTopic(): string {\n    return this.topic.replace('/xmtp/0/m', '/xmtp/0/mE')\n  }\n\n  streamEphemeral(): Promise<Stream<DecodedMessage>> {\n    return Stream.create<DecodedMessage>(\n      this.client,\n      [this.ephemeralTopic],\n      this.decodeMessage.bind(this)\n    )\n  }\n\n  /**\n   * Returns a Stream of any new messages to/from the peerAddress\n   */\n  streamMessages(): Promise<Stream<DecodedMessage>> {\n    return Stream.create<DecodedMessage>(\n      this.client,\n      [this.topic],\n      this.decodeMessage.bind(this)\n    )\n  }\n\n  /**\n   * Send a message into the conversation\n   */\n  async send(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<DecodedMessage> {\n    const payload = await this.client.encodeContent(content, options)\n    const msg = await this.createMessage(payload, options?.timestamp)\n\n    let topic: string\n    if (options?.ephemeral) {\n      topic = this.ephemeralTopic\n    } else {\n      topic = this.topic\n    }\n\n    await this.client.publishEnvelopes([\n      {\n        contentTopic: topic,\n        message: msg.toBytes(),\n        timestamp: msg.sent,\n      },\n    ])\n    const contentType = options?.contentType || ContentTypeText\n\n    return DecodedMessage.fromV2Message(\n      msg,\n      content,\n      contentType,\n      this.topic,\n      payload,\n      this,\n      this.client.address\n    )\n  }\n\n  async createMessage(\n    // Payload is expected to have already gone through `client.encodeContent`\n    payload: Uint8Array,\n    timestamp?: Date\n  ): Promise<MessageV2> {\n    const header: message.MessageHeaderV2 = {\n      topic: this.topic,\n      createdNs: dateToNs(timestamp || new Date()),\n    }\n    const headerBytes = message.MessageHeaderV2.encode(header).finish()\n    const digest = await sha256(concat(headerBytes, payload))\n    const signed = {\n      payload,\n      sender: this.client.signedPublicKeyBundle,\n      signature: await this.client.keystore.signDigest({\n        digest,\n        prekeyIndex: 0,\n        identityKey: undefined,\n      }),\n    }\n    const signedBytes = proto.SignedContent.encode(signed).finish()\n\n    const ciphertext = await this.encryptMessage(signedBytes, headerBytes)\n    const protoMsg = {\n      v1: undefined,\n      v2: { headerBytes, ciphertext },\n    }\n    const bytes = message.Message.encode(protoMsg).finish()\n\n    return MessageV2.create(protoMsg, header, bytes)\n  }\n\n  private async decryptBatch(\n    messages: MessageV2[],\n    throwOnError = false\n  ): Promise<DecodedMessage[]> {\n    const responses = (\n      await this.client.keystore.decryptV2(this.buildDecryptRequest(messages))\n    ).responses\n\n    const out: DecodedMessage[] = []\n    for (let i = 0; i < responses.length; i++) {\n      const result = responses[i]\n      const message = messages[i]\n\n      try {\n        const { decrypted } = getResultOrThrow(result)\n        out.push(await this.buildDecodedMessage(message, decrypted))\n      } catch (e) {\n        if (throwOnError) {\n          throw e\n        }\n        console.warn('Error decoding content', e)\n      }\n    }\n\n    return out\n  }\n\n  private buildDecryptRequest(\n    messages: message.MessageV2[]\n  ): keystore.DecryptV2Request {\n    return {\n      requests: messages.map((m) => {\n        return {\n          payload: m.ciphertext,\n          headerBytes: m.headerBytes,\n          contentTopic: this.topic,\n        }\n      }),\n    }\n  }\n\n  private async encryptMessage(\n    payload: Uint8Array,\n    headerBytes: Uint8Array\n  ): Promise<ciphertext.Ciphertext> {\n    const { responses } = await this.client.keystore.encryptV2({\n      requests: [\n        {\n          payload,\n          headerBytes,\n          contentTopic: this.topic,\n        },\n      ],\n    })\n    if (responses.length !== 1) {\n      throw new Error('Invalid response length')\n    }\n    const { encrypted } = getResultOrThrow(responses[0])\n    return encrypted\n  }\n\n  private async buildDecodedMessage(\n    msg: MessageV2,\n    decrypted: Uint8Array\n  ): Promise<DecodedMessage> {\n    // Decode the decrypted bytes into SignedContent\n    const signed = proto.SignedContent.decode(decrypted)\n    if (\n      !signed.sender?.identityKey ||\n      !signed.sender?.preKey ||\n      !signed.signature\n    ) {\n      throw new Error('incomplete signed content')\n    }\n\n    await validatePrekeys(signed)\n\n    // Verify the signature\n    const digest = await sha256(concat(msg.headerBytes, signed.payload))\n    if (\n      !new SignedPublicKey(signed.sender?.preKey).verify(\n        new Signature(signed.signature),\n        digest\n      )\n    ) {\n      throw new Error('invalid signature')\n    }\n\n    // Derive the sender address from the valid signature\n    const senderAddress = await new SignedPublicKeyBundle(\n      signed.sender\n    ).walletSignatureAddress()\n\n    const { content, contentType, error } = await decodeContent(\n      signed.payload,\n      this.client\n    )\n\n    return DecodedMessage.fromV2Message(\n      msg,\n      content,\n      contentType,\n      this.topic,\n      signed.payload,\n      this,\n      senderAddress,\n      error\n    )\n  }\n\n  async prepareMessage(\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options?: SendOptions\n  ): Promise<PreparedMessage> {\n    const payload = await this.client.encodeContent(content, options)\n    const msg = await this.createMessage(payload, options?.timestamp)\n\n    const topic = options?.ephemeral ? this.ephemeralTopic : this.topic\n\n    const env: messageApi.Envelope = {\n      contentTopic: topic,\n      message: msg.toBytes(),\n      timestampNs: toNanoString(msg.sent),\n    }\n\n    return new PreparedMessage(env, async () => {\n      await this.client.publishEnvelopes([\n        {\n          contentTopic: this.topic,\n          message: msg.toBytes(),\n          timestamp: msg.sent,\n        },\n      ])\n    })\n  }\n\n  async processEnvelope(env: messageApi.Envelope): Promise<MessageV2> {\n    if (!env.message || !env.contentTopic) {\n      throw new Error('empty envelope')\n    }\n    const messageBytes = b64Decode(env.message.toString())\n    const msg = message.Message.decode(messageBytes)\n\n    if (!msg.v2) {\n      throw new Error('unknown message version')\n    }\n\n    const header = message.MessageHeaderV2.decode(msg.v2.headerBytes)\n    if (header.topic !== this.topic) {\n      throw new Error('topic mismatch')\n    }\n\n    return MessageV2.create(msg, header, messageBytes)\n  }\n\n  async decodeMessage(env: messageApi.Envelope): Promise<DecodedMessage> {\n    if (!env.contentTopic) {\n      throw new Error('Missing content topic')\n    }\n    const msg = await this.processEnvelope(env)\n    const decryptResults = await this.decryptBatch([msg], true)\n    if (!decryptResults.length) {\n      throw new Error('No results')\n    }\n    return decryptResults[0]\n  }\n}\n\nasync function validatePrekeys(signed: proto.SignedContent) {\n  // Check that the pre key is signed by the identity key\n  // this is required to chain the prekey-signed message to the identity key\n  // and finally to the user's wallet address\n  const senderPreKey = signed.sender?.preKey\n  if (!senderPreKey || !senderPreKey.signature || !senderPreKey.keyBytes) {\n    throw new Error('missing pre-key or pre-key signature')\n  }\n  const senderIdentityKey = signed.sender?.identityKey\n  if (!senderIdentityKey) {\n    throw new Error('missing identity key in bundle')\n  }\n  const isValidPrekey = await new SignedPublicKey(senderIdentityKey).verifyKey(\n    new SignedPublicKey(senderPreKey)\n  )\n  if (!isValidPrekey) {\n    throw new Error('pre key not signed by identity key')\n  }\n}\n","import { UnsubscribeFn } from './ApiClient'\nimport Client from './Client'\nimport { messageApi } from '@xmtp/proto'\n\nexport type MessageDecoder<M> = (\n  env: messageApi.Envelope\n) => Promise<M | undefined>\n\nexport type ContentTopicUpdater<M> = (msg: M) => string[] | undefined\n\n/**\n * Stream implements an Asynchronous Iterable over messages received from a topic.\n * As such can be used with constructs like for-await-of, yield*, array destructing, etc.\n */\nexport default class Stream<T> {\n  topics: string[]\n  client: Client\n  // queue of incoming Waku messages\n  messages: T[]\n  // queue of already pending Promises\n  resolvers: ((value: IteratorResult<T>) => void)[]\n  // cache the callback so that it can be properly deregistered in Waku\n  // if callback is undefined the stream is closed\n  callback: ((env: messageApi.Envelope) => Promise<void>) | undefined\n\n  unsubscribeFn?: UnsubscribeFn\n\n  constructor(\n    client: Client,\n    topics: string[],\n    decoder: MessageDecoder<T>,\n    contentTopicUpdater?: ContentTopicUpdater<T>\n  ) {\n    this.messages = []\n    this.resolvers = []\n    this.topics = topics\n    this.client = client\n    this.callback = this.newMessageCallback(decoder, contentTopicUpdater)\n  }\n\n  // returns new closure to handle incoming messages\n  private newMessageCallback(\n    decoder: MessageDecoder<T>,\n    contentTopicUpdater?: ContentTopicUpdater<T>\n  ): (env: messageApi.Envelope) => Promise<void> {\n    return async (env: messageApi.Envelope) => {\n      if (!env.message) {\n        return\n      }\n      try {\n        const msg = await decoder(env)\n        // decoder can return undefined to signal a message to ignore/skip.\n        if (!msg) {\n          return\n        }\n        // Check to see if we should update the stream's content topic subscription\n        if (contentTopicUpdater) {\n          const topics = contentTopicUpdater(msg)\n          if (topics) {\n            this.resubscribeToTopics(topics)\n          }\n        }\n        // is there a Promise already pending?\n        const resolver = this.resolvers.pop()\n        if (resolver) {\n          // yes, resolve it\n          resolver({ value: msg })\n        } else {\n          // no, push the message into the queue\n          this.messages.unshift(msg)\n        }\n      } catch (e) {\n        console.warn(e)\n      }\n    }\n  }\n\n  private async start(): Promise<void> {\n    if (!this.callback) {\n      throw new Error('Missing callback for stream')\n    }\n\n    this.unsubscribeFn = this.client.apiClient.subscribe(\n      {\n        contentTopics: this.topics,\n      },\n      async (env: messageApi.Envelope) => {\n        if (!this.callback) return\n        await this?.callback(env)\n      }\n    )\n  }\n\n  static async create<T>(\n    client: Client,\n    topics: string[],\n    decoder: MessageDecoder<T>,\n    contentTopicUpdater?: ContentTopicUpdater<T>\n  ): Promise<Stream<T>> {\n    const stream = new Stream(client, topics, decoder, contentTopicUpdater)\n    await stream.start()\n    return stream\n  }\n\n  // To make Stream proper Async Iterable\n  [Symbol.asyncIterator](): AsyncIterableIterator<T> {\n    return this\n  }\n\n  // return should be called if the interpreter detects that the stream won't be used anymore,\n  // e.g. a for/of loop was exited via a break. It can also be called explicitly.\n  // https://tc39.es/ecma262/#table-iterator-interface-optional-properties\n  // Note that this means the Stream will be closed after it was used in a for-await-of or yield* or similar.\n  async return(): Promise<IteratorResult<T>> {\n    if (this.unsubscribeFn) {\n      await this.unsubscribeFn()\n    }\n    if (!this.callback) {\n      return { value: undefined, done: true }\n    }\n    this.callback = undefined\n    this.resolvers.forEach((resolve) =>\n      resolve({ value: undefined, done: true })\n    )\n    return { value: undefined, done: true }\n  }\n\n  // To make Stream proper Async Iterator\n  // Note that next() will still provide whatever messages were already pending\n  // even after the stream was closed via return().\n  next(): Promise<IteratorResult<T>> {\n    // Is there a message already pending?\n    const msg = this.messages.pop()\n    if (msg) {\n      // yes, return resolved promise\n      return Promise.resolve({ value: msg })\n    }\n    if (!this.callback) {\n      return Promise.resolve({ value: undefined, done: true })\n    }\n    // otherwise return empty Promise and queue its resolver\n    return new Promise((resolve) => this.resolvers.unshift(resolve))\n  }\n\n  // Unsubscribe from the existing content topics and resubscribe to the given topics.\n  private async resubscribeToTopics(topics: string[]): Promise<void> {\n    if (!this.callback || !this.unsubscribeFn) {\n      throw new Error('Missing callback for stream')\n    }\n    await this.unsubscribeFn()\n    this.topics = topics\n    this.unsubscribeFn = this.client.apiClient.subscribe(\n      {\n        contentTopics: this.topics,\n      },\n      async (env: messageApi.Envelope) => {\n        if (!this.callback) return\n        await this?.callback(env)\n      }\n    )\n  }\n}\n","import { publicKey } from '@xmtp/proto'\nimport { PublicKey, SignedPublicKey } from './PublicKey'\n\n// LEGACY: PublicKeyBundle packages all the keys that a participant should advertise.\n// The PreKey must be signed by the IdentityKey.\n// The IdentityKey must be signed by the wallet to authenticate it.\nexport class SignedPublicKeyBundle implements publicKey.SignedPublicKeyBundle {\n  identityKey: SignedPublicKey\n  preKey: SignedPublicKey\n\n  constructor(bundle: publicKey.SignedPublicKeyBundle) {\n    if (!bundle.identityKey) {\n      throw new Error('missing identity key')\n    }\n    if (!bundle.preKey) {\n      throw new Error('missing pre-key')\n    }\n    this.identityKey = new SignedPublicKey(bundle.identityKey)\n    this.preKey = new SignedPublicKey(bundle.preKey)\n  }\n\n  walletSignatureAddress(): Promise<string> {\n    return this.identityKey.walletSignatureAddress()\n  }\n\n  equals(other: this): boolean {\n    return (\n      this.identityKey.equals(other.identityKey) &&\n      this.preKey.equals(other.preKey)\n    )\n  }\n\n  toBytes(): Uint8Array {\n    return publicKey.SignedPublicKeyBundle.encode(this).finish()\n  }\n\n  isFromLegacyBundle(): boolean {\n    return this.identityKey.isFromLegacyKey() && this.preKey.isFromLegacyKey()\n  }\n\n  toLegacyBundle(): PublicKeyBundle {\n    return new PublicKeyBundle({\n      identityKey: this.identityKey.toLegacyKey(),\n      preKey: this.preKey.toLegacyKey(),\n    })\n  }\n\n  static fromBytes(bytes: Uint8Array): SignedPublicKeyBundle {\n    const decoded = publicKey.SignedPublicKeyBundle.decode(bytes)\n    return new SignedPublicKeyBundle(decoded)\n  }\n\n  static fromLegacyBundle(bundle: PublicKeyBundle): SignedPublicKeyBundle {\n    return new SignedPublicKeyBundle({\n      // Note: I am assuming all PublicKeyBundles passed into this have had their identity keys signed by a wallet\n      // Maybe that is not universally true in the future\n      identityKey: SignedPublicKey.fromLegacyKey(bundle.identityKey, true),\n      preKey: SignedPublicKey.fromLegacyKey(bundle.preKey),\n    })\n  }\n}\n\n// LEGACY: PublicKeyBundle packages all the keys that a participant should advertise.\n// The PreKey must be signed by the IdentityKey.\n// The IdentityKey can be signed by the wallet to authenticate it.\nexport class PublicKeyBundle implements publicKey.PublicKeyBundle {\n  identityKey: PublicKey\n  preKey: PublicKey\n\n  constructor(bundle: publicKey.PublicKeyBundle) {\n    if (!bundle.identityKey) {\n      throw new Error('missing identity key')\n    }\n    if (!bundle.preKey) {\n      throw new Error('missing pre-key')\n    }\n    this.identityKey = new PublicKey(bundle.identityKey)\n    this.preKey = new PublicKey(bundle.preKey)\n  }\n\n  equals(other: this): boolean {\n    return (\n      this.identityKey.equals(other.identityKey) &&\n      this.preKey.equals(other.preKey)\n    )\n  }\n\n  walletSignatureAddress(): string {\n    return this.identityKey.walletSignatureAddress()\n  }\n\n  toBytes(): Uint8Array {\n    return publicKey.PublicKeyBundle.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): PublicKeyBundle {\n    const decoded = publicKey.PublicKeyBundle.decode(bytes)\n    return new PublicKeyBundle(decoded)\n  }\n}\n","import { publicKey } from '@xmtp/proto'\nimport * as secp from '@noble/secp256k1'\nimport Long from 'long'\nimport Signature, { WalletSigner } from './Signature'\nimport { equalBytes, hexToBytes } from './utils'\nimport { utils } from 'ethers'\nimport { Signer } from '../types/Signer'\nimport { sha256 } from './encryption'\n\n// SECP256k1 public key in uncompressed format with prefix\ntype secp256k1Uncompressed = {\n  // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes\n  bytes: Uint8Array\n}\n\n// Validate a key.\nfunction secp256k1UncompressedCheck(key: secp256k1Uncompressed): void {\n  if (key.bytes.length !== 65) {\n    throw new Error(`invalid public key length: ${key.bytes.length}`)\n  }\n  if (key.bytes[0] !== 4) {\n    throw new Error(`unrecognized public key prefix: ${key.bytes[0]}`)\n  }\n}\n\nconst MS_NS_TIMESTAMP_THRESHOLD = new Long(10 ** 9).mul(10 ** 9)\n\n// Basic public key without a signature.\nexport class UnsignedPublicKey implements publicKey.UnsignedPublicKey {\n  // time the key was generated, normally ns since epoch, however\n  // to allow transparent conversion of pre-existing signed PublicKey to SignedPublicKey\n  // it can also be ms since epoch; use MS_NS_TIMESTAMP_THRESHOLD to distinguish\n  // the two cases.\n  createdNs: Long\n  secp256k1Uncompressed: secp256k1Uncompressed // eslint-disable-line camelcase\n\n  constructor(obj: publicKey.UnsignedPublicKey) {\n    if (!obj?.secp256k1Uncompressed) {\n      throw new Error('invalid public key')\n    }\n    secp256k1UncompressedCheck(obj.secp256k1Uncompressed)\n    this.secp256k1Uncompressed = obj.secp256k1Uncompressed\n    this.createdNs = obj.createdNs.toUnsigned()\n  }\n\n  // The time the key was generated.\n  generated(): Date | undefined {\n    return new Date(this.timestamp.toNumber())\n  }\n\n  isFromLegacyKey(): boolean {\n    return this.createdNs.lessThan(MS_NS_TIMESTAMP_THRESHOLD)\n  }\n\n  // creation time in milliseconds\n  get timestamp(): Long {\n    return (\n      this.isFromLegacyKey() ? this.createdNs : this.createdNs.div(1000000)\n    ).toUnsigned()\n  }\n\n  // Verify that signature was created from the digest using matching private key.\n  verify(signature: Signature, digest: Uint8Array): boolean {\n    if (!signature.ecdsaCompact) {\n      return false\n    }\n    return secp.verify(\n      signature.ecdsaCompact.bytes,\n      digest,\n      this.secp256k1Uncompressed.bytes\n    )\n  }\n\n  // Verify that the provided public key was signed by matching private key.\n  async verifyKey(pub: PublicKey | SignedPublicKey): Promise<boolean> {\n    if (!pub.signature) {\n      return false\n    }\n    const digest = await sha256(pub.bytesToSign())\n    return this.verify(pub.signature, digest)\n  }\n\n  // Is other the same/equivalent public key?\n  equals(other: this): boolean {\n    return equalBytes(\n      this.secp256k1Uncompressed.bytes,\n      other.secp256k1Uncompressed.bytes\n    )\n  }\n\n  // Derive Ethereum address from this public key.\n  getEthereumAddress(): string {\n    return utils.computeAddress(this.secp256k1Uncompressed.bytes)\n  }\n\n  // Encode public key into bytes.\n  toBytes(): Uint8Array {\n    return publicKey.UnsignedPublicKey.encode(this).finish()\n  }\n\n  // Decode public key from bytes.\n  static fromBytes(bytes: Uint8Array): UnsignedPublicKey {\n    return new UnsignedPublicKey(publicKey.UnsignedPublicKey.decode(bytes))\n  }\n}\n\n// Public key signed by another key pair or a wallet.\nexport class SignedPublicKey\n  extends UnsignedPublicKey\n  implements publicKey.SignedPublicKey\n{\n  keyBytes: Uint8Array // caches the bytes of the encoded unsigned key\n  signature: Signature\n\n  constructor(obj: publicKey.SignedPublicKey) {\n    if (!obj.keyBytes) {\n      throw new Error('missing key bytes')\n    }\n    super(publicKey.UnsignedPublicKey.decode(obj.keyBytes))\n    this.keyBytes = obj.keyBytes\n    if (!obj.signature) {\n      throw new Error('missing key signature')\n    }\n    this.signature = new Signature(obj.signature)\n  }\n\n  // Return the key without the signature.\n  get unsignedKey(): UnsignedPublicKey {\n    return new UnsignedPublicKey({\n      createdNs: this.createdNs,\n      secp256k1Uncompressed: this.secp256k1Uncompressed,\n    })\n  }\n\n  // Return public key of the signer of this key.\n  signerKey(): Promise<UnsignedPublicKey | undefined> {\n    return this.signature.signerKey(this)\n  }\n\n  // Assume the key was signed by a wallet and\n  // return the wallet address that validates\n  // the signature of this key.\n  async walletSignatureAddress(): Promise<string> {\n    if (!this.signature.walletEcdsaCompact) {\n      throw new Error('key was not signed by a wallet')\n    }\n    const pk = await this.signerKey()\n    if (!pk) {\n      throw new Error('key signature not valid')\n    }\n    return pk.getEthereumAddress()\n  }\n\n  // Is other the same/equivalent public key?\n  equals(other: this): boolean {\n    return (\n      this.unsignedKey.equals(other.unsignedKey) &&\n      this.signature.equals(other.signature)\n    )\n  }\n\n  // Return bytes of the encoded unsigned key.\n  bytesToSign(): Uint8Array {\n    return this.keyBytes\n  }\n\n  // Encode signed key into bytes.\n  toBytes(): Uint8Array {\n    return publicKey.SignedPublicKey.encode(this).finish()\n  }\n\n  // Decode signed key from bytes.\n  static fromBytes(bytes: Uint8Array): SignedPublicKey {\n    return new SignedPublicKey(publicKey.SignedPublicKey.decode(bytes))\n  }\n\n  toLegacyKey(): PublicKey {\n    if (!this.isFromLegacyKey()) {\n      throw new Error('cannot be converted to legacy key')\n    }\n    let signature = this.signature\n    if (signature.walletEcdsaCompact) {\n      signature = new Signature({\n        ecdsaCompact: signature.walletEcdsaCompact,\n      })\n    }\n    return new PublicKey({\n      timestamp: this.timestamp,\n      secp256k1Uncompressed: this.secp256k1Uncompressed,\n      signature,\n    })\n  }\n\n  static fromLegacyKey(\n    legacyKey: PublicKey,\n    signedByWallet?: boolean\n  ): SignedPublicKey {\n    if (!legacyKey.signature) {\n      throw new Error('key is not signed')\n    }\n    let signature = legacyKey.signature\n    if (signedByWallet) {\n      signature = new Signature({\n        walletEcdsaCompact: signature.ecdsaCompact,\n      })\n    }\n    return new SignedPublicKey({\n      keyBytes: legacyKey.bytesToSign(),\n      signature,\n    })\n  }\n}\n\n// LEGACY: PublicKey optionally signed with another trusted key pair or a wallet.\n// PublicKeys can be generated through PrivateKey.generate()\nexport class PublicKey\n  extends UnsignedPublicKey\n  implements publicKey.PublicKey\n{\n  signature?: Signature\n\n  constructor(obj: publicKey.PublicKey) {\n    super({\n      createdNs: obj.timestamp.mul(1000000),\n      secp256k1Uncompressed: obj.secp256k1Uncompressed,\n    })\n    if (obj.signature) {\n      // Handle a case where Flutter was publishing signatures with walletEcdsaCompact\n      // instead of ecdsaCompact for v1 keys.\n      if (!obj.signature.ecdsaCompact && obj.signature.walletEcdsaCompact) {\n        this.signature = new Signature({\n          ecdsaCompact: {\n            bytes: obj.signature.walletEcdsaCompact.bytes,\n            recovery: obj.signature.walletEcdsaCompact.recovery,\n          },\n        })\n      } else {\n        this.signature = new Signature(obj.signature)\n      }\n    }\n  }\n\n  get timestamp(): Long {\n    return this.createdNs.div(1000000)\n  }\n\n  bytesToSign(): Uint8Array {\n    return publicKey.PublicKey.encode({\n      timestamp: this.timestamp,\n      secp256k1Uncompressed: this.secp256k1Uncompressed,\n    }).finish()\n  }\n\n  // sign the key using a wallet\n  async signWithWallet(wallet: Signer): Promise<void> {\n    const sigString = await wallet.signMessage(\n      WalletSigner.identitySigRequestText(this.bytesToSign())\n    )\n    const eSig = utils.splitSignature(sigString)\n    const r = hexToBytes(eSig.r)\n    const s = hexToBytes(eSig.s)\n    const sigBytes = new Uint8Array(64)\n    sigBytes.set(r)\n    sigBytes.set(s, r.length)\n    this.signature = new Signature({\n      ecdsaCompact: {\n        bytes: sigBytes,\n        recovery: eSig.recoveryParam,\n      },\n    })\n  }\n\n  // Assume the key was signed by a wallet and\n  // return the wallet address that validates\n  // the signature for this key.\n  walletSignatureAddress(): string {\n    if (!this.signature) {\n      throw new Error('key is not signed')\n    }\n    const digest = hexToBytes(\n      utils.hashMessage(WalletSigner.identitySigRequestText(this.bytesToSign()))\n    )\n    const pk = this.signature.getPublicKey(digest)\n    if (!pk) {\n      throw new Error('key signature is malformed')\n    }\n    return pk.getEthereumAddress()\n  }\n\n  toBytes(): Uint8Array {\n    return publicKey.PublicKey.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): PublicKey {\n    return new PublicKey(publicKey.PublicKey.decode(bytes))\n  }\n}\n","import { signature } from '@xmtp/proto'\nimport Long from 'long'\nimport * as secp from '@noble/secp256k1'\nimport { PublicKey, UnsignedPublicKey, SignedPublicKey } from './PublicKey'\nimport { SignedPrivateKey } from './PrivateKey'\nimport { utils } from 'ethers'\nimport { Signer } from '../types/Signer'\nimport { bytesToHex, equalBytes, hexToBytes } from './utils'\n\n// ECDSA signature with recovery bit.\nexport type ECDSACompactWithRecovery = {\n  bytes: Uint8Array // compact representation [ R || S ], 64 bytes\n  recovery: number // recovery bit\n}\n\n// Validate signature.\nfunction ecdsaCheck(sig: ECDSACompactWithRecovery): void {\n  if (sig.bytes.length !== 64) {\n    throw new Error(`invalid signature length: ${sig.bytes.length}`)\n  }\n  if (sig.recovery !== 0 && sig.recovery !== 1) {\n    throw new Error(`invalid recovery bit: ${sig.recovery}`)\n  }\n}\n\n// Compare signatures.\nfunction ecdsaEqual(\n  a: ECDSACompactWithRecovery,\n  b: ECDSACompactWithRecovery\n): boolean {\n  return a.recovery === b.recovery && equalBytes(a.bytes, b.bytes)\n}\n\n// Derive public key of the signer from the digest and the signature.\nexport function ecdsaSignerKey(\n  digest: Uint8Array,\n  signature: ECDSACompactWithRecovery\n): UnsignedPublicKey | undefined {\n  const bytes = secp.recoverPublicKey(\n    digest,\n    signature.bytes,\n    signature.recovery\n  )\n  return bytes\n    ? new UnsignedPublicKey({\n        secp256k1Uncompressed: { bytes },\n        createdNs: Long.fromNumber(0),\n      })\n    : undefined\n}\n\nexport default class Signature implements signature.Signature {\n  // SECP256k1/SHA256 ECDSA signature\n  ecdsaCompact: ECDSACompactWithRecovery | undefined // eslint-disable-line camelcase\n  // SECP256k1/keccak256 ECDSA signature created with Signer.signMessage (see WalletSigner)\n  walletEcdsaCompact: ECDSACompactWithRecovery | undefined // eslint-disable-line camelcase\n\n  constructor(obj: Partial<signature.Signature>) {\n    if (obj.ecdsaCompact) {\n      ecdsaCheck(obj.ecdsaCompact)\n      this.ecdsaCompact = obj.ecdsaCompact\n    } else if (obj.walletEcdsaCompact) {\n      ecdsaCheck(obj.walletEcdsaCompact)\n      this.walletEcdsaCompact = obj.walletEcdsaCompact\n    } else {\n      throw new Error('invalid signature')\n    }\n  }\n\n  // Return the public key that validates provided key's signature.\n  async signerKey(\n    key: SignedPublicKey\n  ): Promise<UnsignedPublicKey | undefined> {\n    if (this.ecdsaCompact) {\n      return SignedPrivateKey.signerKey(key, this.ecdsaCompact)\n    } else if (this.walletEcdsaCompact) {\n      return WalletSigner.signerKey(key, this.walletEcdsaCompact)\n    } else {\n      return undefined\n    }\n  }\n\n  // LEGACY: Return the public key that validates this signature given the provided digest.\n  // Return undefined if the signature is malformed.\n  getPublicKey(digest: Uint8Array): PublicKey | undefined {\n    let bytes: Uint8Array | undefined\n    if (this.ecdsaCompact) {\n      bytes = secp.recoverPublicKey(\n        digest,\n        this.ecdsaCompact.bytes,\n        this.ecdsaCompact.recovery\n      )\n    } else if (this.walletEcdsaCompact) {\n      bytes = secp.recoverPublicKey(\n        digest,\n        this.walletEcdsaCompact.bytes,\n        this.walletEcdsaCompact.recovery\n      )\n    } else {\n      throw new Error('invalid v1 signature')\n    }\n    return bytes\n      ? new PublicKey({\n          secp256k1Uncompressed: { bytes },\n          timestamp: Long.fromNumber(0),\n        })\n      : undefined\n  }\n\n  // Is this the same/equivalent signature as other?\n  equals(other: Signature): boolean {\n    if (this.ecdsaCompact && other.ecdsaCompact) {\n      return ecdsaEqual(this.ecdsaCompact, other.ecdsaCompact)\n    }\n    if (this.walletEcdsaCompact && other.walletEcdsaCompact) {\n      return ecdsaEqual(this.walletEcdsaCompact, other.walletEcdsaCompact)\n    }\n    return false\n  }\n\n  toBytes(): Uint8Array {\n    return signature.Signature.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): Signature {\n    return new Signature(signature.Signature.decode(bytes))\n  }\n}\n\n// Deprecation in progress\n// A signer that can be used to sign public keys.\nexport interface KeySigner {\n  signKey(key: UnsignedPublicKey): Promise<SignedPublicKey>\n}\n\nexport enum AccountLinkedRole {\n  INBOX_KEY,\n  SEND_KEY,\n}\n\n// A wallet based KeySigner.\nexport class WalletSigner implements KeySigner {\n  wallet: Signer\n\n  constructor(wallet: Signer) {\n    this.wallet = wallet\n  }\n\n  static identitySigRequestText(keyBytes: Uint8Array): string {\n    // Note that an update to this signature request text will require\n    // addition of backward compatibility for existing signatures\n    // and/or a migration; otherwise clients will fail to verify previously\n    // signed keys.\n    return (\n      'XMTP : Create Identity\\n' +\n      `${bytesToHex(keyBytes)}\\n` +\n      '\\n' +\n      'For more info: https://xmtp.org/signatures/'\n    )\n  }\n\n  static signerKey(\n    key: SignedPublicKey,\n    signature: ECDSACompactWithRecovery\n  ): UnsignedPublicKey | undefined {\n    const digest = hexToBytes(\n      utils.hashMessage(this.identitySigRequestText(key.bytesToSign()))\n    )\n    return ecdsaSignerKey(digest, signature)\n  }\n\n  async signKey(key: UnsignedPublicKey): Promise<SignedPublicKey> {\n    const keyBytes = key.toBytes()\n    const sigString = await this.wallet.signMessage(\n      WalletSigner.identitySigRequestText(keyBytes)\n    )\n    const eSig = utils.splitSignature(sigString)\n    const r = hexToBytes(eSig.r)\n    const s = hexToBytes(eSig.s)\n    const sigBytes = new Uint8Array(64)\n    sigBytes.set(r)\n    sigBytes.set(s, r.length)\n    const signature = new Signature({\n      walletEcdsaCompact: {\n        bytes: sigBytes,\n        recovery: eSig.recoveryParam,\n      },\n    })\n    return new SignedPublicKey({ keyBytes, signature })\n  }\n}\n","import { privateKey } from '@xmtp/proto'\nimport * as secp from '@noble/secp256k1'\nimport Long from 'long'\nimport Signature, {\n  ECDSACompactWithRecovery,\n  ecdsaSignerKey,\n  KeySigner,\n} from './Signature'\nimport { PublicKey, SignedPublicKey, UnsignedPublicKey } from './PublicKey'\nimport Ciphertext from './Ciphertext'\nimport { decrypt, encrypt, sha256 } from './encryption'\nimport { equalBytes } from './utils'\n\n// SECP256k1 private key\ntype secp256k1 = {\n  bytes: Uint8Array // D big-endian, 32 bytes\n}\n\n// Validate SECP256k1 private key\nfunction secp256k1Check(key: secp256k1): void {\n  if (key.bytes.length !== 32) {\n    throw new Error(`invalid private key length: ${key.bytes.length}`)\n  }\n}\n\n// A private key signed with another key pair or a wallet.\nexport class SignedPrivateKey\n  implements privateKey.SignedPrivateKey, KeySigner\n{\n  createdNs: Long // time the key was generated, ns since epoch\n  secp256k1: secp256k1 // eslint-disable-line camelcase\n  publicKey: SignedPublicKey // caches corresponding PublicKey\n\n  constructor(obj: privateKey.SignedPrivateKey) {\n    if (!obj.secp256k1) {\n      throw new Error('invalid private key')\n    }\n    secp256k1Check(obj.secp256k1)\n    this.secp256k1 = obj.secp256k1\n    this.createdNs = obj.createdNs\n    if (!obj.publicKey) {\n      throw new Error('missing public key')\n    }\n    this.publicKey = new SignedPublicKey(obj.publicKey)\n  }\n\n  // Create a random key pair signed by the signer.\n  static async generate(signer: KeySigner): Promise<SignedPrivateKey> {\n    const secp256k1 = {\n      bytes: secp.utils.randomPrivateKey(),\n    }\n    const createdNs = Long.fromNumber(new Date().getTime()).mul(1000000)\n    const unsigned = new UnsignedPublicKey({\n      secp256k1Uncompressed: {\n        bytes: secp.getPublicKey(secp256k1.bytes),\n      },\n      createdNs,\n    })\n    const signed = await signer.signKey(unsigned)\n    return new SignedPrivateKey({\n      secp256k1,\n      createdNs,\n      publicKey: signed,\n    })\n  }\n\n  // Time the key was generated.\n  generated(): Date | undefined {\n    return new Date(this.createdNs.div(1000000).toNumber())\n  }\n\n  // Sign provided digest.\n  async sign(digest: Uint8Array): Promise<Signature> {\n    const [signature, recovery] = await secp.sign(\n      digest,\n      this.secp256k1.bytes,\n      {\n        recovered: true,\n        der: false,\n      }\n    )\n    return new Signature({\n      ecdsaCompact: { bytes: signature, recovery },\n    })\n  }\n\n  // Sign provided public key.\n  async signKey(pub: UnsignedPublicKey): Promise<SignedPublicKey> {\n    const keyBytes = pub.toBytes()\n    const digest = await sha256(keyBytes)\n    const signature = await this.sign(digest)\n    return new SignedPublicKey({\n      keyBytes,\n      signature,\n    })\n  }\n\n  // Return public key of the signer of the provided signed key.\n  static async signerKey(\n    key: SignedPublicKey,\n    signature: ECDSACompactWithRecovery\n  ): Promise<UnsignedPublicKey | undefined> {\n    const digest = await sha256(key.bytesToSign())\n    return ecdsaSignerKey(digest, signature)\n  }\n\n  // Derive shared secret from peer's PublicKey;\n  // the peer can derive the same secret using their private key and our public key.\n  sharedSecret(peer: SignedPublicKey | UnsignedPublicKey): Uint8Array {\n    return secp.getSharedSecret(\n      this.secp256k1.bytes,\n      peer.secp256k1Uncompressed.bytes,\n      false\n    )\n  }\n\n  // encrypt plain bytes using a shared secret derived from peer's PublicKey;\n  // additionalData allows including unencrypted parts of a Message in the authentication\n  // protection provided by the encrypted part (to make the whole Message tamper evident)\n  encrypt(\n    plain: Uint8Array,\n    peer: UnsignedPublicKey,\n    additionalData?: Uint8Array\n  ): Promise<Ciphertext> {\n    const secret = this.sharedSecret(peer)\n    return encrypt(plain, secret, additionalData)\n  }\n\n  // decrypt Ciphertext using a shared secret derived from peer's PublicKey;\n  // throws if any part of Ciphertext or additionalData was tampered with\n  decrypt(\n    encrypted: Ciphertext,\n    peer: UnsignedPublicKey,\n    additionalData?: Uint8Array\n  ): Promise<Uint8Array> {\n    const secret = this.sharedSecret(peer)\n    return decrypt(encrypted, secret, additionalData)\n  }\n\n  // Does the provided PublicKey correspond to this PrivateKey?\n  matches(key: SignedPublicKey): boolean {\n    return this.publicKey.equals(key)\n  }\n\n  // Is other the same/equivalent key?\n  equals(other: this): boolean {\n    return (\n      equalBytes(this.secp256k1.bytes, other.secp256k1.bytes) &&\n      this.publicKey.equals(other.publicKey)\n    )\n  }\n\n  // Encode this key into bytes.\n  toBytes(): Uint8Array {\n    return privateKey.SignedPrivateKey.encode(this).finish()\n  }\n\n  // Decode key from bytes.\n  static fromBytes(bytes: Uint8Array): SignedPrivateKey {\n    return new SignedPrivateKey(privateKey.SignedPrivateKey.decode(bytes))\n  }\n\n  static fromLegacyKey(\n    key: PrivateKey,\n    signedByWallet?: boolean\n  ): SignedPrivateKey {\n    return new SignedPrivateKey({\n      createdNs: key.timestamp.mul(1000000),\n      secp256k1: key.secp256k1,\n      publicKey: SignedPublicKey.fromLegacyKey(key.publicKey, signedByWallet),\n    })\n  }\n}\n\n// LEGACY: PrivateKey represents a secp256k1 private key.\nexport class PrivateKey implements privateKey.PrivateKey {\n  timestamp: Long\n  secp256k1: secp256k1 // eslint-disable-line camelcase\n  publicKey: PublicKey // caches corresponding PublicKey\n\n  constructor(obj: privateKey.PrivateKey) {\n    if (!obj.secp256k1) {\n      throw new Error('invalid private key')\n    }\n    secp256k1Check(obj.secp256k1)\n    this.timestamp = obj.timestamp\n    this.secp256k1 = obj.secp256k1\n    if (!obj.publicKey) {\n      throw new Error('missing public key')\n    }\n    this.publicKey = new PublicKey(obj.publicKey)\n  }\n\n  // create a random PrivateKey/PublicKey pair.\n  static generate(): PrivateKey {\n    const secp256k1 = {\n      bytes: secp.utils.randomPrivateKey(),\n    }\n    const timestamp = Long.fromNumber(new Date().getTime())\n    return new PrivateKey({\n      secp256k1,\n      timestamp,\n      publicKey: new PublicKey({\n        secp256k1Uncompressed: {\n          bytes: secp.getPublicKey(secp256k1.bytes),\n        },\n        timestamp,\n      }),\n    })\n  }\n\n  generated(): Date | undefined {\n    return new Date(this.timestamp.toNumber())\n  }\n\n  // sign provided digest\n  async sign(digest: Uint8Array): Promise<Signature> {\n    const [signature, recovery] = await secp.sign(\n      digest,\n      this.secp256k1.bytes,\n      {\n        recovered: true,\n        der: false,\n      }\n    )\n    return new Signature({\n      ecdsaCompact: { bytes: signature, recovery },\n    })\n  }\n\n  // sign provided public key\n  async signKey(pub: PublicKey): Promise<PublicKey> {\n    const digest = await sha256(pub.bytesToSign())\n    pub.signature = await this.sign(digest)\n    return pub\n  }\n\n  // derive shared secret from peer's PublicKey;\n  // the peer can derive the same secret using their PrivateKey and our PublicKey\n  sharedSecret(peer: PublicKey | SignedPublicKey): Uint8Array {\n    return secp.getSharedSecret(\n      this.secp256k1.bytes,\n      peer.secp256k1Uncompressed.bytes,\n      false\n    )\n  }\n\n  // encrypt plain bytes using a shared secret derived from peer's PublicKey;\n  // additionalData allows including unencrypted parts of a Message in the authentication\n  // protection provided by the encrypted part (to make the whole Message tamper evident)\n  encrypt(\n    plain: Uint8Array,\n    peer: PublicKey,\n    additionalData?: Uint8Array\n  ): Promise<Ciphertext> {\n    const secret = this.sharedSecret(peer)\n    return encrypt(plain, secret, additionalData)\n  }\n\n  // decrypt Ciphertext using a shared secret derived from peer's PublicKey;\n  // throws if any part of Ciphertext or additionalData was tampered with\n  decrypt(\n    encrypted: Ciphertext,\n    peer: PublicKey,\n    additionalData?: Uint8Array\n  ): Promise<Uint8Array> {\n    const secret = this.sharedSecret(peer)\n    return decrypt(encrypted, secret, additionalData)\n  }\n\n  // Does the provided PublicKey correspond to this PrivateKey?\n  matches(key: PublicKey): boolean {\n    return this.publicKey.equals(key)\n  }\n\n  // Encode this key into bytes.\n  toBytes(): Uint8Array {\n    return privateKey.PrivateKey.encode(this).finish()\n  }\n\n  // Decode key from bytes.\n  static fromBytes(bytes: Uint8Array): PrivateKey {\n    return new PrivateKey(privateKey.PrivateKey.decode(bytes))\n  }\n}\n","import { ciphertext } from '@xmtp/proto'\n\nexport const AESKeySize = 32 // bytes\nexport const KDFSaltSize = 32 // bytes\n// AES-GCM defaults from https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\nexport const AESGCMNonceSize = 12 // property iv\nexport const AESGCMTagLength = 16 // property tagLength\n\n// Ciphertext packages the encrypted ciphertext with the salt and nonce used to produce it.\n// salt and nonce are not secret, and should be transmitted/stored along with the encrypted ciphertext.\nexport default class Ciphertext implements ciphertext.Ciphertext {\n  aes256GcmHkdfSha256: ciphertext.Ciphertext_Aes256gcmHkdfsha256 | undefined // eslint-disable-line camelcase\n\n  constructor(obj: ciphertext.Ciphertext) {\n    if (!obj.aes256GcmHkdfSha256) {\n      throw new Error('invalid ciphertext')\n    }\n    if (obj.aes256GcmHkdfSha256.payload.length < AESGCMTagLength) {\n      throw new Error(\n        `invalid ciphertext ciphertext length: ${obj.aes256GcmHkdfSha256.payload.length}`\n      )\n    }\n    if (obj.aes256GcmHkdfSha256.hkdfSalt.length !== KDFSaltSize) {\n      throw new Error(\n        `invalid ciphertext salt length: ${obj.aes256GcmHkdfSha256.hkdfSalt.length}`\n      )\n    }\n    if (obj.aes256GcmHkdfSha256.gcmNonce.length !== AESGCMNonceSize) {\n      throw new Error(\n        `invalid ciphertext nonce length: ${obj.aes256GcmHkdfSha256.gcmNonce.length}`\n      )\n    }\n    this.aes256GcmHkdfSha256 = obj.aes256GcmHkdfSha256\n  }\n\n  toBytes(): Uint8Array {\n    return ciphertext.Ciphertext.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): Ciphertext {\n    return new Ciphertext(ciphertext.Ciphertext.decode(bytes))\n  }\n}\n","/**\n * This file is necessary to ensure that the crypto library is available\n * in node and the browser\n */\n\n// eslint-disable-next-line no-restricted-syntax\nimport { webcrypto as nodeCrypto } from 'crypto'\n\nconst webcrypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis\n    ? (globalThis.crypto as nodeCrypto.Crypto)\n    : undefined\n\nconst crypto = webcrypto ?? nodeCrypto\n\nexport default crypto\n","import { ciphertext } from '@xmtp/proto'\nimport Ciphertext, { AESGCMNonceSize, KDFSaltSize } from './Ciphertext'\nimport crypto from './crypto'\n\nconst hkdfNoInfo = new ArrayBuffer(0)\n\n// This is a variation of https://github.com/paulmillr/noble-secp256k1/blob/main/index.ts#L1378-L1388\n// that uses `digest('SHA-256', bytes)` instead of `digest('SHA-256', bytes.buffer)`\n// which seems to produce different results.\nexport async function sha256(bytes: Uint8Array): Promise<Uint8Array> {\n  return new Uint8Array(await crypto.subtle.digest('SHA-256', bytes))\n}\n\n// symmetric authenticated encryption of plaintext using the secret;\n// additionalData is used to protect un-encrypted parts of the message (header)\n// in the authentication scope of the encryption.\nexport async function encrypt(\n  plain: Uint8Array,\n  secret: Uint8Array,\n  additionalData?: Uint8Array\n): Promise<Ciphertext> {\n  const salt = crypto.getRandomValues(new Uint8Array(KDFSaltSize))\n  const nonce = crypto.getRandomValues(new Uint8Array(AESGCMNonceSize))\n  const key = await hkdf(secret, salt)\n  const encrypted: ArrayBuffer = await crypto.subtle.encrypt(\n    aesGcmParams(nonce, additionalData),\n    key,\n    plain\n  )\n  return new Ciphertext({\n    aes256GcmHkdfSha256: {\n      payload: new Uint8Array(encrypted),\n      hkdfSalt: salt,\n      gcmNonce: nonce,\n    },\n  })\n}\n\n// symmetric authenticated decryption of the encrypted ciphertext using the secret and additionalData\nexport async function decrypt(\n  encrypted: Ciphertext | ciphertext.Ciphertext,\n  secret: Uint8Array,\n  additionalData?: Uint8Array\n): Promise<Uint8Array> {\n  if (!encrypted.aes256GcmHkdfSha256) {\n    throw new Error('invalid payload ciphertext')\n  }\n  const key = await hkdf(secret, encrypted.aes256GcmHkdfSha256.hkdfSalt)\n  const decrypted: ArrayBuffer = await crypto.subtle.decrypt(\n    aesGcmParams(encrypted.aes256GcmHkdfSha256.gcmNonce, additionalData),\n    key,\n    encrypted.aes256GcmHkdfSha256.payload\n  )\n  return new Uint8Array(decrypted)\n}\n\n// helper for building Web Crypto API encryption parameter structure\nfunction aesGcmParams(\n  nonce: Uint8Array,\n  additionalData?: Uint8Array\n): AesGcmParams {\n  const spec: AesGcmParams = {\n    name: 'AES-GCM',\n    iv: nonce,\n  }\n  if (additionalData) {\n    spec.additionalData = additionalData\n  }\n  return spec\n}\n\n// Derive AES-256-GCM key from a shared secret and salt.\n// Returns crypto.CryptoKey suitable for the encrypt/decrypt API\nasync function hkdf(secret: Uint8Array, salt: Uint8Array): Promise<CryptoKey> {\n  const key = await crypto.subtle.importKey('raw', secret, 'HKDF', false, [\n    'deriveKey',\n  ])\n  return crypto.subtle.deriveKey(\n    { name: 'HKDF', hash: 'SHA-256', salt, info: hkdfNoInfo },\n    key,\n    { name: 'AES-GCM', length: 256 },\n    false,\n    ['encrypt', 'decrypt']\n  )\n}\n","import * as secp from '@noble/secp256k1'\n\nexport const bytesToHex = secp.utils.bytesToHex\n\nexport function hexToBytes(s: string): Uint8Array {\n  if (s.startsWith('0x')) {\n    s = s.slice(2)\n  }\n  const bytes = new Uint8Array(s.length / 2)\n  for (let i = 0; i < bytes.length; i++) {\n    const j = i * 2\n    bytes[i] = Number.parseInt(s.slice(j, j + 2), 16)\n  }\n  return bytes\n}\n\nexport function bytesToBase64(bytes: Uint8Array): string {\n  return Buffer.from(bytes).toString('base64')\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array): boolean {\n  if (b1.length !== b2.length) {\n    return false\n  }\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false\n    }\n  }\n  return true\n}\n","import { privateKey as proto } from '@xmtp/proto'\nimport { PrivateKey, SignedPrivateKey } from './PrivateKey'\nimport { WalletSigner } from './Signature'\nimport { PublicKey, SignedPublicKey } from './PublicKey'\nimport { PublicKeyBundle, SignedPublicKeyBundle } from './PublicKeyBundle'\nimport { Signer } from '../types/Signer'\nimport { NoMatchingPreKeyError } from './errors'\n\n// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.\n// This bundle must not be shared with anyone, although will have to be persisted\n// somehow so that older messages can be decrypted again.\nexport class PrivateKeyBundleV2 implements proto.PrivateKeyBundleV2 {\n  identityKey: SignedPrivateKey\n  preKeys: SignedPrivateKey[]\n  version = 2\n  private _publicKeyBundle?: SignedPublicKeyBundle\n\n  constructor(bundle: proto.PrivateKeyBundleV2) {\n    if (!bundle.identityKey) {\n      throw new Error('missing identity key')\n    }\n    this.identityKey = new SignedPrivateKey(bundle.identityKey)\n    this.preKeys = (bundle.preKeys || []).map((k) => new SignedPrivateKey(k))\n  }\n\n  // Generate a new key bundle with the preKey signed byt the identityKey.\n  // Optionally sign the identityKey with the provided wallet as well.\n  static async generate(wallet: Signer): Promise<PrivateKeyBundleV2> {\n    const identityKey = await SignedPrivateKey.generate(\n      new WalletSigner(wallet)\n    )\n    const bundle = new PrivateKeyBundleV2({\n      identityKey,\n      preKeys: [],\n    })\n    await bundle.addPreKey()\n    return bundle\n  }\n\n  // Return the current (latest) pre-key (to be advertised).\n  getCurrentPreKey(): SignedPrivateKey {\n    return this.preKeys[0]\n  }\n\n  // Find pre-key matching the provided public key.\n  findPreKey(which: SignedPublicKey): SignedPrivateKey {\n    const preKey = this.preKeys.find((key) => key.matches(which))\n    if (!preKey) {\n      throw new NoMatchingPreKeyError(which)\n    }\n    return preKey\n  }\n\n  // Generate a new pre-key to be used as the current pre-key.\n  async addPreKey(): Promise<void> {\n    this._publicKeyBundle = undefined\n    const preKey = await SignedPrivateKey.generate(this.identityKey)\n    this.preKeys.unshift(preKey)\n  }\n\n  // Return a key bundle with the current pre-key.\n  getPublicKeyBundle(): SignedPublicKeyBundle {\n    if (!this._publicKeyBundle) {\n      this._publicKeyBundle = new SignedPublicKeyBundle({\n        identityKey: this.identityKey.publicKey,\n        preKey: this.getCurrentPreKey().publicKey,\n      })\n    }\n    return this._publicKeyBundle\n  }\n\n  // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol\n  // where the sender's ephemeral key pair is replaced by the sender's pre-key.\n  // @peer is the peer's public key bundle\n  // @myPreKey indicates which of my preKeys should be used to derive the secret\n  // @recipient indicates if this is the sending or receiving side.\n  async sharedSecret(\n    peer: SignedPublicKeyBundle,\n    myPreKey: SignedPublicKey,\n    isRecipient: boolean\n  ): Promise<Uint8Array> {\n    if (!peer.identityKey || !peer.preKey) {\n      throw new Error('invalid peer key bundle')\n    }\n    if (!(await peer.identityKey.verifyKey(peer.preKey))) {\n      throw new Error('peer preKey signature invalid')\n    }\n    if (!this.identityKey) {\n      throw new Error('missing identity key')\n    }\n    let dh1: Uint8Array, dh2: Uint8Array, preKey: SignedPrivateKey\n    if (isRecipient) {\n      preKey = this.findPreKey(myPreKey)\n      dh1 = preKey.sharedSecret(peer.identityKey)\n      dh2 = this.identityKey.sharedSecret(peer.preKey)\n    } else {\n      preKey = this.findPreKey(myPreKey)\n      dh1 = this.identityKey.sharedSecret(peer.preKey)\n      dh2 = preKey.sharedSecret(peer.identityKey)\n    }\n    const dh3 = preKey.sharedSecret(peer.preKey)\n    const secret = new Uint8Array(dh1.length + dh2.length + dh3.length)\n    secret.set(dh1, 0)\n    secret.set(dh2, dh1.length)\n    secret.set(dh3, dh1.length + dh2.length)\n    return secret\n  }\n\n  encode(): Uint8Array {\n    return proto.PrivateKeyBundle.encode({\n      v1: undefined,\n      v2: this,\n    }).finish()\n  }\n\n  equals(other: this): boolean {\n    if (this.preKeys.length !== other.preKeys.length) {\n      return false\n    }\n    for (let i = 0; i < this.preKeys.length; i++) {\n      if (!this.preKeys[i].equals(other.preKeys[i])) {\n        return false\n      }\n    }\n    return this.identityKey.equals(other.identityKey)\n  }\n\n  static fromLegacyBundle(bundle: PrivateKeyBundleV1): PrivateKeyBundleV2 {\n    return new PrivateKeyBundleV2({\n      identityKey: SignedPrivateKey.fromLegacyKey(bundle.identityKey, true),\n      preKeys: bundle.preKeys.map((k: PrivateKey) =>\n        SignedPrivateKey.fromLegacyKey(k)\n      ),\n    })\n  }\n}\n\n// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.\n// This bundle must not be shared with anyone, although will have to be persisted\n// somehow so that older messages can be decrypted again.\nexport class PrivateKeyBundleV1 implements proto.PrivateKeyBundleV1 {\n  identityKey: PrivateKey\n  preKeys: PrivateKey[]\n  version = 1\n  private _publicKeyBundle?: PublicKeyBundle\n\n  constructor(bundle: proto.PrivateKeyBundleV1) {\n    if (!bundle.identityKey) {\n      throw new Error('missing identity key')\n    }\n    this.identityKey = new PrivateKey(bundle.identityKey)\n    this.preKeys = (bundle.preKeys || []).map((k) => new PrivateKey(k))\n  }\n\n  // Generate a new key bundle with the preKey signed byt the identityKey.\n  // Optionally sign the identityKey with the provided wallet as well.\n  static async generate(wallet?: Signer): Promise<PrivateKeyBundleV1> {\n    const identityKey = PrivateKey.generate()\n    if (wallet) {\n      await identityKey.publicKey.signWithWallet(wallet)\n    }\n    const bundle = new PrivateKeyBundleV1({\n      identityKey,\n      preKeys: [],\n    })\n    await bundle.addPreKey()\n    return bundle\n  }\n\n  // Return the current (latest) pre-key (to be advertised).\n  getCurrentPreKey(): PrivateKey {\n    return this.preKeys[0]\n  }\n\n  // Find pre-key matching the provided public key.\n  findPreKey(which: PublicKey): PrivateKey {\n    const preKey = this.preKeys.find((key) => key.matches(which))\n    if (!preKey) {\n      throw new NoMatchingPreKeyError(which)\n    }\n    return preKey\n  }\n\n  // Generate a new pre-key to be used as the current pre-key.\n  async addPreKey(): Promise<void> {\n    this._publicKeyBundle = undefined\n    const preKey = PrivateKey.generate()\n    await this.identityKey.signKey(preKey.publicKey)\n    this.preKeys.unshift(preKey)\n  }\n\n  // Return a key bundle with the current pre-key.\n  getPublicKeyBundle(): PublicKeyBundle {\n    if (!this._publicKeyBundle) {\n      this._publicKeyBundle = new PublicKeyBundle({\n        identityKey: this.identityKey.publicKey,\n        preKey: this.getCurrentPreKey().publicKey,\n      })\n    }\n    return this._publicKeyBundle\n  }\n\n  // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol\n  // where the sender's ephemeral key pair is replaced by the sender's pre-key.\n  // @peer is the peer's public key bundle\n  // @myPreKey indicates which of my preKeys should be used to derive the secret\n  // @recipient indicates if this is the sending or receiving side.\n  async sharedSecret(\n    peer: PublicKeyBundle | SignedPublicKeyBundle,\n    myPreKey: PublicKey,\n    isRecipient: boolean\n  ): Promise<Uint8Array> {\n    if (!peer.identityKey || !peer.preKey) {\n      throw new Error('invalid peer key bundle')\n    }\n    if (!(await peer.identityKey.verifyKey(peer.preKey))) {\n      throw new Error('peer preKey signature invalid')\n    }\n    if (!this.identityKey) {\n      throw new Error('missing identity key')\n    }\n    let dh1: Uint8Array, dh2: Uint8Array, preKey: PrivateKey\n    if (isRecipient) {\n      preKey = this.findPreKey(myPreKey)\n      dh1 = preKey.sharedSecret(peer.identityKey)\n      dh2 = this.identityKey.sharedSecret(peer.preKey)\n    } else {\n      preKey = this.findPreKey(myPreKey)\n      dh1 = this.identityKey.sharedSecret(peer.preKey)\n      dh2 = preKey.sharedSecret(peer.identityKey)\n    }\n    const dh3 = preKey.sharedSecret(peer.preKey)\n    const secret = new Uint8Array(dh1.length + dh2.length + dh3.length)\n    secret.set(dh1, 0)\n    secret.set(dh2, dh1.length)\n    secret.set(dh3, dh1.length + dh2.length)\n    return secret\n  }\n\n  encode(): Uint8Array {\n    return proto.PrivateKeyBundle.encode({\n      v1: this,\n      v2: undefined,\n    }).finish()\n  }\n}\n\nexport type PrivateKeyBundle = PrivateKeyBundleV1 | PrivateKeyBundleV2\n\nexport function decodePrivateKeyBundle(bytes: Uint8Array): PrivateKeyBundle {\n  const b = proto.PrivateKeyBundle.decode(bytes)\n  if (b.v1) {\n    return new PrivateKeyBundleV1(b.v1)\n  }\n  if (b.v2) {\n    return new PrivateKeyBundleV2(b.v2)\n  }\n  throw new Error('unknown private key bundle version')\n}\n","import { PublicKey, SignedPublicKey } from './PublicKey'\nimport { bytesToHex } from './utils'\n\nexport class NoMatchingPreKeyError extends Error {\n  constructor(preKey: PublicKey | SignedPublicKey) {\n    super(\n      `no pre-key matches: ${bytesToHex(preKey.secp256k1Uncompressed.bytes)}`\n    )\n  }\n}\n","import { ciphertext } from '@xmtp/proto'\nimport { sha256 } from './encryption'\nimport { PrivateKey, SignedPrivateKey } from './PrivateKey'\nimport { PublicKey, SignedPublicKey } from './PublicKey'\nimport Signature from './Signature'\n\nconst IV_LENGTH = 16\nconst EPHEMERAL_PUBLIC_KEY_LENGTH = 65\nconst MAC_LENGTH = 32\nconst AES_BLOCK_SIZE = 16\n\nconst assertEciesLengths = (\n  ecies: ciphertext.SignedEciesCiphertext_Ecies\n): void => {\n  if (ecies.iv.length !== IV_LENGTH) {\n    throw new Error('Invalid iv length')\n  }\n  if (ecies.ephemeralPublicKey.length !== EPHEMERAL_PUBLIC_KEY_LENGTH) {\n    throw new Error('Invalid ephemPublicKey length')\n  }\n  if (\n    ecies.ciphertext.length < 1 ||\n    ecies.ciphertext.length % AES_BLOCK_SIZE !== 0\n  ) {\n    throw new Error('Invalid ciphertext length')\n  }\n  if (ecies.mac.length !== MAC_LENGTH) {\n    throw new Error('Invalid mac length')\n  }\n}\n\nexport default class SignedEciesCiphertext\n  implements ciphertext.SignedEciesCiphertext\n{\n  eciesBytes: Uint8Array\n  signature: Signature\n  ciphertext: ciphertext.SignedEciesCiphertext_Ecies\n\n  constructor({ eciesBytes, signature }: ciphertext.SignedEciesCiphertext) {\n    if (!eciesBytes || !eciesBytes.length) {\n      throw new Error('eciesBytes is empty')\n    }\n    if (!signature) {\n      throw new Error('signature is undefined')\n    }\n    this.eciesBytes = eciesBytes\n    this.signature = new Signature(signature)\n    this.ciphertext = ciphertext.SignedEciesCiphertext_Ecies.decode(eciesBytes)\n  }\n\n  toBytes(): Uint8Array {\n    return ciphertext.SignedEciesCiphertext.encode(this).finish()\n  }\n\n  async verify(pubKey: PublicKey | SignedPublicKey): Promise<boolean> {\n    return pubKey.verify(this.signature, await sha256(this.eciesBytes))\n  }\n\n  static fromBytes(data: Uint8Array): SignedEciesCiphertext {\n    const obj = ciphertext.SignedEciesCiphertext.decode(data)\n\n    return new SignedEciesCiphertext(obj)\n  }\n\n  static async create(\n    ecies: ciphertext.SignedEciesCiphertext_Ecies,\n    signer: PrivateKey | SignedPrivateKey\n  ): Promise<SignedEciesCiphertext> {\n    assertEciesLengths(ecies)\n\n    const eciesBytes =\n      ciphertext.SignedEciesCiphertext_Ecies.encode(ecies).finish()\n    const signature = await signer.sign(await sha256(eciesBytes))\n\n    return new SignedEciesCiphertext({ eciesBytes, signature })\n  }\n}\n","import { Envelope } from '@xmtp/proto/ts/dist/types/message_api/v1/message_api.pb'\nimport { bytesToHex } from './crypto/utils'\nimport { sha256 } from './crypto/encryption'\n\nexport class PreparedMessage {\n  messageEnvelope: Envelope\n  onSend: () => Promise<void>\n\n  constructor(messageEnvelope: Envelope, onSend: () => Promise<void>) {\n    this.messageEnvelope = messageEnvelope\n    this.onSend = onSend\n  }\n\n  async messageID(): Promise<string> {\n    if (!this.messageEnvelope.message) {\n      throw new Error('no envelope message')\n    }\n\n    return bytesToHex(await sha256(this.messageEnvelope.message))\n  }\n\n  async send() {\n    await this.onSend()\n  }\n}\n","import { keystore } from '@xmtp/proto'\nimport { PublicKeyBundle } from '../crypto/PublicKeyBundle'\nimport { KeystoreError } from '../keystore/errors'\nimport { MessageV1 } from '../Message'\nimport { WithoutUndefined } from './typedefs'\n\n// Validates the Keystore response. Throws on errors or missing fields.\n// Returns a type with all possibly undefined fields required to be defined\nexport const getResultOrThrow = <\n  T extends\n    | keystore.DecryptResponse_Response\n    | keystore.EncryptResponse_Response\n>(\n  response: T\n): WithoutUndefined<NonNullable<T['result']>> => {\n  if (response.error) {\n    throw new KeystoreError(response.error.code, response.error.message)\n  }\n  if (!response.result) {\n    throw new KeystoreError(\n      keystore.ErrorCode.ERROR_CODE_UNSPECIFIED,\n      'No result from Keystore'\n    )\n  }\n\n  if ('encrypted' in response.result && !response.result.encrypted) {\n    throw new Error('Missing ciphertext')\n  }\n\n  if ('decrypted' in response.result && !response.result.decrypted) {\n    throw new Error('Missing decrypted result')\n  }\n\n  return response.result as unknown as WithoutUndefined<\n    NonNullable<T['result']>\n  >\n}\n\nexport const buildDecryptV1Request = (\n  messages: MessageV1[],\n  myPublicKeyBundle: PublicKeyBundle\n): keystore.DecryptV1Request => {\n  return {\n    requests: messages.map((m: MessageV1) => {\n      const sender = new PublicKeyBundle({\n        identityKey: m.header.sender?.identityKey,\n        preKey: m.header.sender?.preKey,\n      })\n\n      const isSender = myPublicKeyBundle.equals(sender)\n\n      return {\n        payload: m.ciphertext,\n        peerKeys: isSender\n          ? new PublicKeyBundle({\n              identityKey: m.header.recipient?.identityKey,\n              preKey: m.header.recipient?.preKey,\n            })\n          : sender,\n        headerBytes: m.headerBytes,\n        isSender,\n      }\n    }),\n  }\n}\n","import { keystore } from '@xmtp/proto'\n\nexport class KeystoreError extends Error implements keystore.KeystoreError {\n  code: keystore.ErrorCode\n\n  constructor(code: keystore.ErrorCode, message: string) {\n    super(message)\n    this.code = code\n  }\n}\n","import { content as proto } from '@xmtp/proto'\n\n// Represents proto.ContentTypeId\nexport class ContentTypeId {\n  authorityId: string\n  typeId: string\n  versionMajor: number\n  versionMinor: number\n\n  constructor(obj: proto.ContentTypeId) {\n    this.authorityId = obj.authorityId\n    this.typeId = obj.typeId\n    this.versionMajor = obj.versionMajor\n    this.versionMinor = obj.versionMinor\n  }\n\n  toString(): string {\n    return `${this.authorityId}/${this.typeId}:${this.versionMajor}.${this.versionMinor}`\n  }\n\n  sameAs(id: ContentTypeId): boolean {\n    return this.authorityId === id.authorityId && this.typeId === id.typeId\n  }\n}\n\n// Represents proto.EncodedContent\nexport interface EncodedContent {\n  type: ContentTypeId\n  parameters: Record<string, string>\n  fallback?: string\n  compression?: number\n  content: Uint8Array\n}\n\n// Define an interface for the encoding machinery for a specific content type\n// associated with a given ContentTypeId\n// A codec can be registered with a Client to be automatically invoked when\n// handling content of the corresponding content type.\nexport interface CodecRegistry {\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-explicit-any\n  codecFor(contentType: ContentTypeId): ContentCodec<any> | undefined\n}\n\nexport interface ContentCodec<T> {\n  contentType: ContentTypeId\n  encode(content: T, registry: CodecRegistry): EncodedContent\n  decode(content: EncodedContent, registry: CodecRegistry): T\n}\n\n// xmtp.org/fallback\n//\n// This is not a real content type, it is used to signal to the recipient\n// that the content in the message is the fallback description (if present)\n// in case the original content type is not supported.\n// This content type MUST NOT be used to send content.\nexport const ContentTypeFallback = new ContentTypeId({\n  authorityId: 'xmtp.org',\n  typeId: 'fallback',\n  versionMajor: 1,\n  versionMinor: 0,\n})\n","import { ContentTypeId, ContentCodec, EncodedContent } from '../MessageContent'\n\n// xmtp.org/text\n//\n// This content type is used for a plain text content represented by a simple string\nexport const ContentTypeText = new ContentTypeId({\n  authorityId: 'xmtp.org',\n  typeId: 'text',\n  versionMajor: 1,\n  versionMinor: 0,\n})\n\nexport enum Encoding {\n  utf8 = 'UTF-8',\n}\n\nexport class TextCodec implements ContentCodec<string> {\n  get contentType(): ContentTypeId {\n    return ContentTypeText\n  }\n\n  encode(content: string): EncodedContent {\n    return {\n      type: ContentTypeText,\n      parameters: { encoding: Encoding.utf8 },\n      content: new TextEncoder().encode(content),\n    }\n  }\n\n  decode(content: EncodedContent): string {\n    const encoding = content.parameters.encoding\n    if (encoding && encoding !== Encoding.utf8) {\n      throw new Error(`unrecognized encoding ${encoding}`)\n    }\n    return new TextDecoder().decode(content.content)\n  }\n}\n","import {\n  Conversation,\n  ConversationV1,\n  ConversationV2,\n} from './conversations/Conversation'\nimport type Client from './Client'\nimport {\n  message as proto,\n  content as protoContent,\n  conversationReference,\n} from '@xmtp/proto'\nimport Long from 'long'\nimport Ciphertext from './crypto/Ciphertext'\nimport { PublicKeyBundle, PublicKey } from './crypto'\nimport { bytesToHex } from './crypto/utils'\nimport { sha256 } from './crypto/encryption'\nimport {\n  ContentTypeFallback,\n  ContentTypeId,\n  EncodedContent,\n} from './MessageContent'\nimport { dateToNs, nsToDate } from './utils'\nimport { decompress } from './Compression'\nimport { Keystore } from './keystore'\nimport { buildDecryptV1Request, getResultOrThrow } from './utils/keystore'\n\nconst headerBytesAndCiphertext = (\n  msg: proto.Message\n): [Uint8Array, Ciphertext] => {\n  if (msg.v1?.ciphertext) {\n    return [msg.v1.headerBytes, new Ciphertext(msg.v1.ciphertext)]\n  }\n  if (msg.v2?.ciphertext) {\n    return [msg.v2.headerBytes, new Ciphertext(msg.v2.ciphertext)]\n  }\n  throw new Error('unknown message version')\n}\n\n// Message is basic unit of communication on the network.\n// Message timestamp is set by the sender.\nclass MessageBase {\n  headerBytes: Uint8Array // encoded header bytes\n  ciphertext: Ciphertext\n  // content allows attaching decoded content to the Message\n  // the message receiving APIs need to return a Message to provide access to the header fields like sender/recipient\n  contentType?: ContentTypeId\n  error?: Error\n  /**\n   * Identifier that is deterministically derived from the bytes of the message\n   * header and ciphertext, where all those bytes are authenticated. This can\n   * be used in determining uniqueness of messages.\n   */\n  id: string\n  private bytes: Uint8Array\n\n  constructor(id: string, bytes: Uint8Array, obj: proto.Message) {\n    ;[this.headerBytes, this.ciphertext] = headerBytesAndCiphertext(obj)\n    this.id = id\n    this.bytes = bytes\n  }\n\n  toBytes(): Uint8Array {\n    return this.bytes\n  }\n}\n\n// Message header carries the sender and recipient keys used to protect message.\n// Message timestamp is set by the sender.\nexport class MessageV1 extends MessageBase implements proto.MessageV1 {\n  header: proto.MessageHeaderV1 // eslint-disable-line camelcase\n  // wallet address derived from the signature of the message recipient\n  senderAddress: string | undefined\n  conversation = undefined\n\n  constructor(\n    id: string,\n    bytes: Uint8Array,\n    obj: proto.Message,\n    header: proto.MessageHeaderV1,\n    senderAddress: string | undefined\n  ) {\n    super(id, bytes, obj)\n    this.senderAddress = senderAddress\n    this.header = header\n  }\n\n  static async create(\n    obj: proto.Message,\n    header: proto.MessageHeaderV1,\n    bytes: Uint8Array\n  ): Promise<MessageV1> {\n    if (!header.sender) {\n      throw new Error('missing message sender')\n    }\n    const senderAddress = new PublicKeyBundle(\n      header.sender\n    ).walletSignatureAddress()\n    const id = bytesToHex(await sha256(bytes))\n    return new MessageV1(id, bytes, obj, header, senderAddress)\n  }\n\n  get sent(): Date {\n    return new Date(this.header.timestamp.toNumber())\n  }\n\n  // wallet address derived from the signature of the message recipient\n  get recipientAddress(): string | undefined {\n    if (!this.header?.recipient?.identityKey) {\n      return undefined\n    }\n    return new PublicKey(\n      this.header.recipient.identityKey\n    ).walletSignatureAddress()\n  }\n\n  async decrypt(\n    keystore: Keystore,\n    myPublicKeyBundle: PublicKeyBundle\n  ): Promise<Uint8Array> {\n    const responses = (\n      await keystore.decryptV1(buildDecryptV1Request([this], myPublicKeyBundle))\n    ).responses\n\n    if (!responses.length) {\n      throw new Error('No response from Keystore')\n    }\n\n    const { decrypted } = getResultOrThrow(responses[0])\n\n    return decrypted\n  }\n\n  static fromBytes(bytes: Uint8Array): Promise<MessageV1> {\n    const message = proto.Message.decode(bytes)\n    const [headerBytes] = headerBytesAndCiphertext(message)\n    const header = proto.MessageHeaderV1.decode(headerBytes)\n    if (!header) {\n      throw new Error('missing message header')\n    }\n    if (!header.sender) {\n      throw new Error('missing message sender')\n    }\n    if (!header.sender.identityKey) {\n      throw new Error('missing message sender identity key')\n    }\n    if (!header.sender.preKey) {\n      throw new Error('missing message sender pre-key')\n    }\n    if (!header.recipient) {\n      throw new Error('missing message recipient')\n    }\n    if (!header.recipient.identityKey) {\n      throw new Error('missing message recipient identity-key')\n    }\n    if (!header.recipient.preKey) {\n      throw new Error('missing message recipient pre-key')\n    }\n\n    return MessageV1.create(message, header, bytes)\n  }\n\n  static async encode(\n    keystore: Keystore,\n    payload: Uint8Array,\n    sender: PublicKeyBundle,\n    recipient: PublicKeyBundle,\n    timestamp: Date\n  ): Promise<MessageV1> {\n    const header: proto.MessageHeaderV1 = {\n      sender,\n      recipient,\n      timestamp: Long.fromNumber(timestamp.getTime()),\n    }\n    const headerBytes = proto.MessageHeaderV1.encode(header).finish()\n    const results = await keystore.encryptV1({\n      requests: [\n        {\n          recipient,\n          headerBytes,\n          payload,\n        },\n      ],\n    })\n\n    if (!results.responses.length) {\n      throw new Error('No response from Keystore')\n    }\n\n    const { encrypted: ciphertext } = getResultOrThrow(results.responses[0])\n\n    const protoMsg = {\n      v1: { headerBytes, ciphertext },\n      v2: undefined,\n    }\n    const bytes = proto.Message.encode(protoMsg).finish()\n    return MessageV1.create(protoMsg, header, bytes)\n  }\n}\n\nexport class MessageV2 extends MessageBase implements proto.MessageV2 {\n  senderAddress: string | undefined\n  private header: proto.MessageHeaderV2 // eslint-disable-line camelcase\n\n  constructor(\n    id: string,\n    bytes: Uint8Array,\n    obj: proto.Message,\n    header: proto.MessageHeaderV2\n  ) {\n    super(id, bytes, obj)\n    this.header = header\n  }\n\n  static async create(\n    obj: proto.Message,\n    header: proto.MessageHeaderV2,\n    bytes: Uint8Array\n  ): Promise<MessageV2> {\n    const id = bytesToHex(await sha256(bytes))\n\n    return new MessageV2(id, bytes, obj, header)\n  }\n\n  get sent(): Date {\n    return nsToDate(this.header.createdNs)\n  }\n}\n\nexport type Message = MessageV1 | MessageV2\n\nexport class DecodedMessage {\n  id: string\n  messageVersion: 'v1' | 'v2'\n  senderAddress: string\n  recipientAddress?: string\n  sent: Date\n  contentTopic: string\n  conversation: Conversation\n  contentType: ContentTypeId\n  content: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  error?: Error\n  contentBytes: Uint8Array\n\n  constructor({\n    id,\n    messageVersion,\n    senderAddress,\n    recipientAddress,\n    conversation,\n    contentBytes,\n    contentType,\n    contentTopic,\n    content,\n    sent,\n    error,\n  }: Omit<DecodedMessage, 'toBytes'>) {\n    this.id = id\n    this.messageVersion = messageVersion\n    this.senderAddress = senderAddress\n    this.recipientAddress = recipientAddress\n    this.conversation = conversation\n    this.contentType = contentType\n    this.sent = sent\n    this.error = error\n    this.content = content\n    this.contentTopic = contentTopic\n    this.contentBytes = contentBytes\n  }\n\n  toBytes(): Uint8Array {\n    return proto.DecodedMessage.encode({\n      ...this,\n      conversation: {\n        topic: this.conversation.topic,\n        context: this.conversation.context ?? undefined,\n        createdNs: dateToNs(this.conversation.createdAt),\n        peerAddress: this.conversation.peerAddress,\n      },\n      sentNs: dateToNs(this.sent),\n    }).finish()\n  }\n\n  static async fromBytes(\n    data: Uint8Array,\n    client: Client\n  ): Promise<DecodedMessage> {\n    const protoVal = proto.DecodedMessage.decode(data)\n    const messageVersion = protoVal.messageVersion\n\n    if (messageVersion !== 'v1' && messageVersion !== 'v2') {\n      throw new Error('Invalid message version')\n    }\n\n    if (!protoVal.conversation) {\n      throw new Error('No conversation reference found')\n    }\n\n    const { content, contentType, error } = await decodeContent(\n      protoVal.contentBytes,\n      client\n    )\n\n    return new DecodedMessage({\n      ...protoVal,\n      content,\n      contentType,\n      error,\n      messageVersion,\n      sent: nsToDate(protoVal.sentNs),\n      conversation: conversationReferenceToConversation(\n        protoVal.conversation,\n        client,\n        messageVersion\n      ),\n    })\n  }\n\n  static fromV1Message(\n    message: MessageV1,\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    contentType: ContentTypeId,\n    contentBytes: Uint8Array,\n    contentTopic: string,\n    conversation: Conversation,\n    error?: Error\n  ): DecodedMessage {\n    const { id, senderAddress, recipientAddress, sent } = message\n    if (!senderAddress) {\n      throw new Error('Sender address is required')\n    }\n    return new DecodedMessage({\n      id,\n      messageVersion: 'v1',\n      senderAddress,\n      recipientAddress,\n      sent,\n      content,\n      contentBytes,\n      contentType,\n      contentTopic,\n      conversation,\n      error,\n    })\n  }\n\n  static fromV2Message(\n    message: MessageV2,\n    content: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    contentType: ContentTypeId,\n    contentTopic: string,\n    contentBytes: Uint8Array,\n    conversation: Conversation,\n    senderAddress: string,\n    error?: Error\n  ): DecodedMessage {\n    const { id, sent } = message\n\n    return new DecodedMessage({\n      id,\n      messageVersion: 'v2',\n      senderAddress,\n      sent,\n      content,\n      contentBytes,\n      contentType,\n      contentTopic,\n      conversation,\n      error,\n    })\n  }\n}\n\nexport async function decodeContent(contentBytes: Uint8Array, client: Client) {\n  const encodedContent = protoContent.EncodedContent.decode(contentBytes)\n\n  if (!encodedContent.type) {\n    throw new Error('missing content type')\n  }\n\n  let content: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  let contentType = new ContentTypeId(encodedContent.type)\n  let error: Error | undefined\n\n  await decompress(encodedContent, 1000)\n\n  const codec = client.codecFor(contentType)\n  if (codec) {\n    content = codec.decode(encodedContent as EncodedContent, client)\n  } else {\n    error = new Error('unknown content type ' + contentType)\n    if (encodedContent.fallback) {\n      content = encodedContent.fallback\n      contentType = ContentTypeFallback\n    }\n  }\n\n  return { content, contentType, error }\n}\n\nfunction conversationReferenceToConversation(\n  reference: conversationReference.ConversationReference,\n  client: Client,\n  version: DecodedMessage['messageVersion']\n): Conversation {\n  if (version === 'v1') {\n    return new ConversationV1(\n      client,\n      reference.peerAddress,\n      nsToDate(reference.createdNs)\n    )\n  }\n  if (version === 'v2') {\n    return new ConversationV2(\n      client,\n      reference.topic,\n      reference.peerAddress,\n      nsToDate(reference.createdNs),\n      reference.context\n    )\n  }\n  throw new Error(`Unknown conversation version ${version}`)\n}\n","// This import has to come first so that the polyfills are registered before the stream polyfills\nimport { content as proto } from '@xmtp/proto'\n\n//\n// Compression\n//\n\nexport async function decompress(\n  encoded: proto.EncodedContent,\n  maxSize: number\n): Promise<void> {\n  if (encoded.compression === undefined) {\n    return\n  }\n  const sink = { bytes: new Uint8Array(encoded.content.length) }\n  await readStreamFromBytes(encoded.content)\n    .pipeThrough(\n      new DecompressionStream(compressionIdFromCode(encoded.compression))\n    )\n    .pipeTo(writeStreamToBytes(sink, maxSize))\n  encoded.content = sink.bytes\n}\n\nexport async function compress(encoded: proto.EncodedContent): Promise<void> {\n  if (encoded.compression === undefined) {\n    return\n  }\n  const sink = { bytes: new Uint8Array(encoded.content.length / 10) }\n  await readStreamFromBytes(encoded.content)\n    .pipeThrough(\n      new CompressionStream(compressionIdFromCode(encoded.compression))\n    )\n    .pipeTo(writeStreamToBytes(sink, encoded.content.length + 1000))\n  encoded.content = sink.bytes\n}\n\nfunction compressionIdFromCode(code: proto.Compression): string {\n  if (code === proto.Compression.COMPRESSION_GZIP) {\n    return 'gzip'\n  }\n  if (code === proto.Compression.COMPRESSION_DEFLATE) {\n    return 'deflate'\n  }\n  throw new Error('unrecognized compression algorithm')\n}\n\nexport function readStreamFromBytes(\n  bytes: Uint8Array,\n  chunkSize = 1024\n): ReadableStream {\n  let position = 0\n  return new ReadableStream({\n    pull(controller) {\n      if (position >= bytes.length) {\n        return controller.close()\n      }\n      let end = position + chunkSize\n      end = end <= bytes.length ? end : bytes.length\n      controller.enqueue(bytes.subarray(position, end))\n      position = end\n    },\n  })\n}\n\nexport function writeStreamToBytes(\n  sink: {\n    bytes: Uint8Array\n  },\n  maxSize: number\n): WritableStream {\n  let position = 0\n  return new WritableStream({\n    write(chunk: Uint8Array) {\n      const end = position + chunk.length\n      if (end > maxSize) {\n        throw new Error('maximum output size exceeded')\n      }\n      while (sink.bytes.length < end) {\n        sink.bytes = growBytes(sink.bytes, maxSize)\n      }\n      sink.bytes.set(chunk, position)\n      position = end\n    },\n\n    close() {\n      if (position < sink.bytes.length) {\n        sink.bytes = sink.bytes.subarray(0, position)\n      }\n    },\n  })\n}\nfunction growBytes(bytes: Uint8Array, maxSize: number): Uint8Array {\n  let newSize = bytes.length * 2\n  if (newSize > maxSize) {\n    newSize = maxSize\n  }\n  const bigger = new Uint8Array(newSize)\n  bigger.set(bytes)\n  return bigger\n}\n","import { PrivateKeyBundleV1 } from './crypto/PrivateKeyBundle'\nimport { PublicKeyBundle, SignedPublicKeyBundle } from './crypto'\nimport {\n  buildUserContactTopic,\n  mapPaginatedStream,\n  EnvelopeMapper,\n  buildUserInviteTopic,\n} from './utils'\nimport { utils } from 'ethers'\nimport { Signer } from './types/Signer'\nimport { Conversations } from './conversations'\nimport { ContentTypeText, TextCodec } from './codecs/Text'\nimport { ContentTypeId, ContentCodec } from './MessageContent'\nimport { compress } from './Compression'\nimport { content as proto, messageApi, fetcher } from '@xmtp/proto'\nimport { decodeContactBundle, encodeContactBundle } from './ContactBundle'\nimport ApiClient, { ApiUrls, PublishParams, SortDirection } from './ApiClient'\nimport { KeystoreAuthenticator } from './authn'\nimport { Flatten } from './utils/typedefs'\nimport BackupClient, { BackupType } from './message-backup/BackupClient'\nimport { createBackupClient } from './message-backup/BackupClientFactory'\nimport { Keystore } from './keystore'\nimport {\n  KeyGeneratorKeystoreProvider,\n  KeystoreProvider,\n  KeystoreProviderUnavailableError,\n  NetworkKeystoreProvider,\n  StaticKeystoreProvider,\n} from './keystore/providers'\nconst { Compression } = proto\nconst { b64Decode } = fetcher\n\n// eslint-disable @typescript-eslint/explicit-module-boundary-types\n// eslint-disable @typescript-eslint/no-explicit-any\n\n// Default maximum allowed content size\nconst MaxContentSize = 100 * 1024 * 1024 // 100M\n\n// Parameters for the listMessages functions\nexport type ListMessagesOptions = {\n  checkAddresses?: boolean\n  startTime?: Date\n  endTime?: Date\n  limit?: number\n  direction?: messageApi.SortDirection\n}\n\nexport type ListMessagesPaginatedOptions = {\n  startTime?: Date\n  endTime?: Date\n  pageSize?: number\n  direction?: messageApi.SortDirection\n}\n\n// Parameters for the send functions\nexport { Compression }\nexport type SendOptions = {\n  contentType?: ContentTypeId\n  contentFallback?: string\n  compression?: proto.Compression\n  timestamp?: Date\n  ephemeral?: boolean\n}\n\nexport type XmtpEnv = keyof typeof ApiUrls\nexport type PreEventCallback = () => Promise<void>\n\n/**\n * Network startup options\n */\nexport type NetworkOptions = {\n  /**\n   * Specify which XMTP environment to connect to. (default: `dev`)\n   */\n  env: XmtpEnv\n  /**\n   * apiUrl can be used to override the `env` flag and connect to a\n   * specific endpoint\n   */\n  apiUrl: string | undefined\n  /**\n   * identifier that's included with API requests.\n   *\n   * For example, you can use the following format:\n   * `appVersion: APP_NAME + '/' + APP_VERSION`.\n   * Setting this value provides telemetry that shows which apps are\n   * using the XMTP client SDK. This information can help XMTP developers\n   * provide app support, especially around communicating important\n   * SDK updates, including deprecations and required upgrades.\n   */\n  appVersion?: string\n  /**\n   * Skip publishing the user's contact bundle as part of Client startup.\n   *\n   * This flag should be used with caution, as we rely on contact publishing to\n   * let other users know your public key and periodically run migrations on\n   * this data with new SDK versions.\n   *\n   * Your application should have this flag set to `false` at least _some_ of the\n   * time.\n   *\n   * The most common use-case for setting this to `true` is cases where the Client\n   * instance is very short-lived. For example, spinning up a Client to decrypt\n   * a push notification.\n   */\n  skipContactPublishing: boolean\n}\n\nexport type ContentOptions = {\n  /**\n   * Allow configuring codecs for additional content types\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  codecs: ContentCodec<any>[]\n\n  /**\n   * Set the maximum content size in bytes that is allowed by the Client.\n   * Currently only checked when decompressing compressed content.\n   */\n  maxContentSize: number\n}\n\nexport type KeyStoreOptions = {\n  /**\n   * Provide an array of KeystoreProviders.\n   * The client will attempt to use each one in sequence until one successfully\n   * returns a Keystore instance\n   */\n  keystoreProviders: KeystoreProvider[]\n  /**\n   * Enable the Keystore to persist conversations in the provided storage interface\n   */\n  persistConversations: boolean\n  /**\n   * Provide a XMTP PrivateKeyBundle encoded as a Uint8Array.\n   * A bundle can be retried using `Client.getKeys(...)`\n   */\n  privateKeyOverride?: Uint8Array\n}\n\nexport type LegacyOptions = {\n  publishLegacyContact?: boolean\n}\n\nexport type PreEventCallbackOptions = {\n  /**\n   * preCreateIdentityCallback will be called immediately before a Create Identity\n   * wallet signature is requested from the user.\n   *\n   * The provided function must return a Promise and will be awaited, allowing the\n   * developer to update the UI or insert a required delay before requesting a signature.\n   */\n  preCreateIdentityCallback?: PreEventCallback\n  /**\n   * preEnableIdentityCallback will be called immediately before an Enable Identity\n   * wallet signature is requested from the user.\n   *\n   * The provided function must return a Promise and will be awaited, allowing the\n   * developer to update the UI or insert a required delay before requesting a signature.\n   */\n  preEnableIdentityCallback?: PreEventCallback\n}\n\n/**\n * Aggregate type for client options. Optional properties are used when the default value is calculated on invocation, and are computed\n * as needed by each function. All other defaults are specified in defaultOptions.\n */\nexport type ClientOptions = Flatten<\n  NetworkOptions &\n    KeyStoreOptions &\n    ContentOptions &\n    LegacyOptions &\n    PreEventCallbackOptions\n>\n\n/**\n * Provide a default client configuration. These settings can be used on their own, or as a starting point for custom configurations\n *\n * @param opts additional options to override the default settings\n */\nexport function defaultOptions(opts?: Partial<ClientOptions>): ClientOptions {\n  const _defaultOptions: ClientOptions = {\n    privateKeyOverride: undefined,\n    env: 'dev',\n    apiUrl: undefined,\n    codecs: [new TextCodec()],\n    maxContentSize: MaxContentSize,\n    persistConversations: true,\n    skipContactPublishing: false,\n    keystoreProviders: defaultKeystoreProviders(),\n  }\n  if (opts?.codecs) {\n    opts.codecs = _defaultOptions.codecs.concat(opts.codecs)\n  }\n\n  return { ..._defaultOptions, ...opts } as ClientOptions\n}\n\n/**\n * Client class initiates connection to the XMTP network.\n * Should be created with `await Client.create(options)`\n */\nexport default class Client {\n  address: string\n  keystore: Keystore\n  apiClient: ApiClient\n  contacts: Set<string> // address which we have connected to\n  publicKeyBundle: PublicKeyBundle\n  private knownPublicKeyBundles: Map<\n    string,\n    PublicKeyBundle | SignedPublicKeyBundle\n  > // addresses and key bundles that we have witnessed\n\n  private _backupClient: BackupClient\n  private _conversations: Conversations\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _codecs: Map<string, ContentCodec<any>>\n  private _maxContentSize: number\n\n  constructor(\n    publicKeyBundle: PublicKeyBundle,\n    apiClient: ApiClient,\n    backupClient: BackupClient,\n    keystore: Keystore\n  ) {\n    this.contacts = new Set<string>()\n    this.knownPublicKeyBundles = new Map<\n      string,\n      PublicKeyBundle | SignedPublicKeyBundle\n    >()\n    // TODO: Remove keys and legacyKeys\n    this.keystore = keystore\n    this.publicKeyBundle = publicKeyBundle\n    this.address = publicKeyBundle.walletSignatureAddress()\n    this._conversations = new Conversations(this)\n    this._codecs = new Map()\n    this._maxContentSize = MaxContentSize\n    this.apiClient = apiClient\n    this._backupClient = backupClient\n  }\n\n  /**\n   * @type {Conversations}\n   */\n  get conversations(): Conversations {\n    return this._conversations\n  }\n\n  get backupType(): BackupType {\n    return this._backupClient.backupType\n  }\n\n  get signedPublicKeyBundle(): SignedPublicKeyBundle {\n    return SignedPublicKeyBundle.fromLegacyBundle(this.publicKeyBundle)\n  }\n\n  /**\n   * Create and start a client associated with given wallet.\n   *\n   * @param wallet the wallet as a Signer instance\n   * @param opts specify how to to connect to the network\n   */\n  static async create(\n    wallet: Signer | null,\n    opts?: Partial<ClientOptions>\n  ): Promise<Client> {\n    const options = defaultOptions(opts)\n    const apiClient = createApiClientFromOptions(options)\n    const keystore = await bootstrapKeystore(options, apiClient, wallet)\n    const publicKeyBundle = new PublicKeyBundle(\n      await keystore.getPublicKeyBundle()\n    )\n    const address = publicKeyBundle.walletSignatureAddress()\n    apiClient.setAuthenticator(new KeystoreAuthenticator(keystore))\n    const backupClient = await Client.setupBackupClient(address, options.env)\n    const client = new Client(\n      publicKeyBundle,\n      apiClient,\n      backupClient,\n      keystore\n    )\n    await client.init(options)\n    return client\n  }\n\n  /**\n   * Export the XMTP PrivateKeyBundle from the SDK as a `Uint8Array`.\n   *\n   * This bundle can then be provided as `privateKeyOverride` in a\n   * subsequent call to `Client.create(...)`\n   *\n   * Be very careful with these keys, as they can be used to\n   * impersonate a user on the XMTP network and read the user's\n   * messages.\n   */\n  static async getKeys(\n    wallet: Signer | null,\n    opts?: Partial<ClientOptions>\n  ): Promise<Uint8Array> {\n    const client = await Client.create(wallet, opts)\n    const keys = await client.keystore.getPrivateKeyBundle()\n    return new PrivateKeyBundleV1(keys).encode()\n  }\n\n  private static async setupBackupClient(\n    walletAddress: string,\n    env: keyof typeof ApiUrls\n  ): Promise<BackupClient> {\n    // Hard-code the provider to use for now\n    const selectBackupProvider = async () => {\n      return Promise.resolve({\n        type: env === 'local' ? BackupType.xmtpTopicStore : BackupType.none,\n      })\n    }\n    return createBackupClient(walletAddress, selectBackupProvider)\n  }\n\n  private async init(options: ClientOptions): Promise<void> {\n    options.codecs.forEach((codec) => {\n      this.registerCodec(codec)\n    })\n    this._maxContentSize = options.maxContentSize\n    if (!options.skipContactPublishing) {\n      await this.ensureUserContactPublished(options.publishLegacyContact)\n    }\n  }\n\n  // gracefully shut down the client\n  async close(): Promise<void> {\n    return undefined\n  }\n\n  private async ensureUserContactPublished(legacy = false): Promise<void> {\n    const bundle = await getUserContactFromNetwork(this.apiClient, this.address)\n    if (\n      bundle &&\n      bundle instanceof SignedPublicKeyBundle &&\n      this.signedPublicKeyBundle.equals(bundle)\n    ) {\n      return\n    }\n    // TEMPORARY: publish V1 contact to make sure there is one in the topic\n    // in order to preserve compatibility with pre-v7 clients.\n    // Remove when pre-v7 clients are deprecated\n    await this.publishUserContact(true)\n    if (!legacy) {\n      await this.publishUserContact(legacy)\n    }\n  }\n\n  // PRIVATE: publish the key bundle into the contact topic\n  // left public for testing purposes\n  async publishUserContact(legacy = false): Promise<void> {\n    const bundle = legacy ? this.publicKeyBundle : this.signedPublicKeyBundle\n    await this.publishEnvelopes([\n      {\n        contentTopic: buildUserContactTopic(this.address),\n        message: encodeContactBundle(bundle),\n      },\n    ])\n  }\n\n  /**\n   * Returns the cached PublicKeyBundle if one is known for the given address or fetches\n   * one from the network\n   *\n   * This throws if either the address is invalid or the contact is not published.\n   * See also [#canMessage].\n   */\n  async getUserContact(\n    peerAddress: string\n  ): Promise<PublicKeyBundle | SignedPublicKeyBundle | undefined> {\n    peerAddress = utils.getAddress(peerAddress) // EIP55 normalize the address case.\n    const existingBundle = this.knownPublicKeyBundles.get(peerAddress)\n    if (existingBundle) {\n      return existingBundle\n    }\n\n    const newBundle = await getUserContactFromNetwork(\n      this.apiClient,\n      peerAddress\n    )\n\n    if (newBundle) {\n      this.knownPublicKeyBundles.set(peerAddress, newBundle)\n    }\n\n    return newBundle\n  }\n\n  /**\n   * Identical to getUserContact but for multiple peer addresses\n   */\n  async getUserContacts(\n    peerAddresses: string[]\n  ): Promise<(PublicKeyBundle | SignedPublicKeyBundle | undefined)[]> {\n    // EIP55 normalize all peer addresses\n    const normalizedAddresses = peerAddresses.map((address) =>\n      utils.getAddress(address)\n    )\n    // The logic here is tricky because we need to do a batch query for any uncached bundles,\n    // then interleave back into an ordered array. So we create a map<string, keybundle|undefined>\n    // and fill it with cached values, then take any undefined entries and form a BatchQuery from those.\n    const addressToBundle = new Map<\n      string,\n      PublicKeyBundle | SignedPublicKeyBundle | undefined\n    >()\n    const uncachedAddresses = []\n    for (const address of normalizedAddresses) {\n      const existingBundle = this.knownPublicKeyBundles.get(address)\n      if (existingBundle) {\n        addressToBundle.set(address, existingBundle)\n      } else {\n        addressToBundle.set(address, undefined)\n        uncachedAddresses.push(address)\n      }\n    }\n\n    // Now do a getUserContactsFromNetwork call\n    const newBundles = await getUserContactsFromNetwork(\n      this.apiClient,\n      uncachedAddresses\n    )\n\n    // Now merge the newBundles into the addressToBundle map\n    for (let i = 0; i < newBundles.length; i++) {\n      const address = uncachedAddresses[i]\n      const bundle = newBundles[i]\n      addressToBundle.set(address, bundle)\n      // If the bundle is not undefined, cache it\n      if (bundle) {\n        this.knownPublicKeyBundles.set(address, bundle)\n      }\n    }\n\n    // Finally return the bundles in the same order as the input addresses\n    return normalizedAddresses.map((address) => addressToBundle.get(address))\n  }\n\n  /**\n   * Used to force getUserContact fetch contact from the network.\n   */\n  forgetContact(peerAddress: string) {\n    peerAddress = utils.getAddress(peerAddress) // EIP55 normalize the address case.\n    this.knownPublicKeyBundles.delete(peerAddress)\n  }\n\n  public async canMessage(peerAddress: string): Promise<boolean>\n  public async canMessage(peerAddress: string[]): Promise<boolean[]>\n\n  /**\n   * Check if @peerAddress can be messaged, specifically\n   * it checks that a PublicKeyBundle can be found for the given address\n   */\n  public async canMessage(\n    peerAddress: string | string[]\n  ): Promise<boolean | boolean[]> {\n    try {\n      if (Array.isArray(peerAddress)) {\n        const contacts = await this.getUserContacts(peerAddress)\n        return contacts.map((contact) => !!contact)\n      }\n      // Else do the single address case\n      const keyBundle = await this.getUserContact(peerAddress)\n      return keyBundle !== undefined\n    } catch (e) {\n      // Instead of throwing, a bad address should just return false.\n      return false\n    }\n  }\n\n  static async canMessage(\n    peerAddress: string,\n    opts?: Partial<NetworkOptions>\n  ): Promise<boolean>\n\n  static async canMessage(\n    peerAddress: string[],\n    opts?: Partial<NetworkOptions>\n  ): Promise<boolean[]>\n\n  static async canMessage(\n    peerAddress: string | string[],\n    opts?: Partial<NetworkOptions>\n  ): Promise<boolean | boolean[]> {\n    const apiUrl = opts?.apiUrl || ApiUrls[opts?.env || 'dev']\n\n    if (Array.isArray(peerAddress)) {\n      const rawPeerAddresses: string[] = peerAddress\n      // Try to normalize each of the peer addresses\n      const normalizedPeerAddresses = rawPeerAddresses.map((address) =>\n        utils.getAddress(address)\n      )\n      // The getUserContactsFromNetwork will return false instead of throwing\n      // on invalid envelopes\n      const contacts = await getUserContactsFromNetwork(\n        new ApiClient(apiUrl, { appVersion: opts?.appVersion }),\n        normalizedPeerAddresses\n      )\n      return contacts.map((contact) => !!contact)\n    }\n    try {\n      peerAddress = utils.getAddress(peerAddress) // EIP55 normalize the address case.\n    } catch (e) {\n      return false\n    }\n    const keyBundle = await getUserContactFromNetwork(\n      new ApiClient(apiUrl, { appVersion: opts?.appVersion }),\n      peerAddress\n    )\n    return keyBundle !== undefined\n  }\n\n  private validateEnvelope(env: PublishParams): void {\n    const bytes = env.message\n    if (!env.contentTopic) {\n      throw new Error('Missing content topic')\n    }\n\n    if (!bytes || !bytes.length) {\n      throw new Error('Cannot publish empty message')\n    }\n  }\n\n  /**\n   * Low level method for publishing envelopes to the XMTP network with\n   * no pre-processing or encryption applied.\n   *\n   * Primarily used internally\n   *\n   * @param envelopes PublishParams[]\n   */\n  async publishEnvelopes(envelopes: PublishParams[]): Promise<void> {\n    for (const env of envelopes) {\n      this.validateEnvelope(env)\n    }\n\n    await this.apiClient.publish(envelopes)\n  }\n\n  /**\n   * Register a codec to be automatically used for encoding/decoding\n   * messages of the given Content Type\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  registerCodec(codec: ContentCodec<any>): void {\n    const id = codec.contentType\n    const key = `${id.authorityId}/${id.typeId}`\n    this._codecs.set(key, codec)\n  }\n\n  /**\n   * Find a matching codec for a given `ContentTypeId` from the\n   * client's codec registry\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  codecFor(contentType: ContentTypeId): ContentCodec<any> | undefined {\n    const key = `${contentType.authorityId}/${contentType.typeId}`\n    const codec = this._codecs.get(key)\n    if (!codec) {\n      return undefined\n    }\n    if (contentType.versionMajor > codec.contentType.versionMajor) {\n      return undefined\n    }\n    return codec\n  }\n\n  /**\n   * Convert arbitrary content into a serialized `EncodedContent` instance\n   * with the given options\n   */\n  async encodeContent(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    content: any,\n    options?: SendOptions\n  ): Promise<Uint8Array> {\n    const contentType = options?.contentType || ContentTypeText\n    const codec = this.codecFor(contentType)\n    if (!codec) {\n      throw new Error('unknown content type ' + contentType)\n    }\n    const encoded = codec.encode(content, this)\n    if (options?.contentFallback) {\n      encoded.fallback = options.contentFallback\n    }\n    if (typeof options?.compression === 'number') {\n      encoded.compression = options.compression\n    }\n    await compress(encoded)\n    return proto.EncodedContent.encode(encoded).finish()\n  }\n\n  listInvitations(opts?: ListMessagesOptions): Promise<messageApi.Envelope[]> {\n    return this.listEnvelopes(\n      buildUserInviteTopic(this.address),\n      async (env) => env,\n      opts\n    )\n  }\n\n  /**\n   * List stored messages from the specified topic.\n   *\n   * A specified mapper function will be applied to each envelope.\n   * If the mapper function throws an error during processing, the\n   * envelope will be discarded.\n   */\n  async listEnvelopes<Out>(\n    topic: string,\n    mapper: EnvelopeMapper<Out>,\n    opts?: ListMessagesOptions\n  ): Promise<Out[]> {\n    if (!opts) {\n      opts = {}\n    }\n    const { startTime, endTime, limit } = opts\n\n    const envelopes = await this.apiClient.query(\n      { contentTopic: topic, startTime, endTime },\n      {\n        direction:\n          opts.direction || messageApi.SortDirection.SORT_DIRECTION_ASCENDING,\n        limit,\n      }\n    )\n    const results: Out[] = []\n    for (const env of envelopes) {\n      if (!env.message) continue\n      try {\n        const res = await mapper(env)\n        results.push(res)\n      } catch (e) {\n        console.warn('Error in listEnvelopes mapper', e)\n      }\n    }\n    return results\n  }\n\n  /**\n   * List messages on a given set of content topics, yielding one page at a time\n   */\n  listEnvelopesPaginated<Out>(\n    contentTopic: string,\n    mapper: EnvelopeMapper<Out>,\n    opts?: ListMessagesPaginatedOptions\n  ): AsyncGenerator<Out[]> {\n    return mapPaginatedStream(\n      this.apiClient.queryIteratePages(\n        {\n          contentTopic,\n          startTime: opts?.startTime,\n          endTime: opts?.endTime,\n        },\n        { direction: opts?.direction, pageSize: opts?.pageSize || 100 }\n      ),\n      mapper\n    )\n  }\n}\n\nfunction createApiClientFromOptions(options: ClientOptions): ApiClient {\n  const apiUrl = options.apiUrl || ApiUrls[options.env]\n  return new ApiClient(apiUrl, { appVersion: options.appVersion })\n}\n\n/**\n * Retrieve a key bundle from given user's contact topic\n */\nasync function getUserContactFromNetwork(\n  apiClient: ApiClient,\n  peerAddress: string\n): Promise<PublicKeyBundle | SignedPublicKeyBundle | undefined> {\n  const stream = apiClient.queryIterator(\n    { contentTopic: buildUserContactTopic(peerAddress) },\n    { pageSize: 5, direction: SortDirection.SORT_DIRECTION_DESCENDING }\n  )\n\n  for await (const env of stream) {\n    if (!env.message) continue\n    const keyBundle = decodeContactBundle(b64Decode(env.message.toString()))\n    let address: string | undefined\n    try {\n      address = await keyBundle?.walletSignatureAddress()\n    } catch (e) {\n      address = undefined\n    }\n\n    if (address === peerAddress) {\n      return keyBundle\n    }\n  }\n  return undefined\n}\n\n/**\n * Retrieve a list of key bundles given a list of user addresses\n */\nasync function getUserContactsFromNetwork(\n  apiClient: ApiClient,\n  peerAddresses: string[]\n): Promise<(PublicKeyBundle | SignedPublicKeyBundle | undefined)[]> {\n  const userContactTopics = peerAddresses.map(buildUserContactTopic)\n  const topicToEnvelopes = await apiClient.batchQuery(\n    userContactTopics.map((topic) => ({\n      contentTopic: topic,\n      pageSize: 5,\n      direction: SortDirection.SORT_DIRECTION_DESCENDING,\n    }))\n  )\n\n  // Transform topicToEnvelopes into a list of PublicKeyBundles or undefined\n  // by going through each message and attempting to decode\n  return Promise.all(\n    peerAddresses.map(async (address: string, index: number) => {\n      const envelopes = topicToEnvelopes[index]\n      if (!envelopes) {\n        return undefined\n      }\n      for (const env of envelopes) {\n        if (!env.message) continue\n        try {\n          const keyBundle = decodeContactBundle(\n            b64Decode(env.message.toString())\n          )\n          const signingAddress = await keyBundle?.walletSignatureAddress()\n          if (address === signingAddress) {\n            return keyBundle\n          } else {\n            console.info('Received contact bundle with incorrect address')\n          }\n        } catch (e) {\n          console.info('Invalid contact bundle', e)\n        }\n      }\n      return undefined\n    })\n  )\n}\n\n/**\n * Get the default list of `KeystoreProviders` used in the SDK\n *\n * Particularly useful if a developer wants to add their own\n * provider to the head of the list while falling back to the\n * default functionality\n */\nexport function defaultKeystoreProviders(): KeystoreProvider[] {\n  return [\n    // First check to see if a `privateKeyOverride` is provided and use that\n    new StaticKeystoreProvider(),\n    // Next check to see if a EncryptedPrivateKeyBundle exists on the network for the wallet\n    new NetworkKeystoreProvider(),\n    // If the first two failed with `KeystoreProviderUnavailableError`, then generate a new key and write it to the network\n    new KeyGeneratorKeystoreProvider(),\n  ]\n}\n\n/**\n * Take an array of KeystoreProviders from the options and try them until one succeeds\n */\nasync function bootstrapKeystore(\n  opts: ClientOptions,\n  apiClient: ApiClient,\n  wallet: Signer | null\n): Promise<Keystore> {\n  for (const provider of opts.keystoreProviders) {\n    try {\n      return await provider.newKeystore(opts, apiClient, wallet ?? undefined)\n    } catch (err) {\n      if (err instanceof KeystoreProviderUnavailableError) {\n        continue\n      }\n      throw err\n    }\n  }\n  throw new Error('No keystore providers available')\n}\n","import { messageApi, keystore, conversationReference } from '@xmtp/proto'\nimport { Mutex } from 'async-mutex'\nimport { SignedPublicKeyBundle } from './../crypto/PublicKeyBundle'\nimport { ListMessagesOptions } from './../Client'\nimport { InvitationContext } from './../Invitation'\nimport { Conversation, ConversationV1, ConversationV2 } from './Conversation'\nimport { MessageV1, DecodedMessage } from '../Message'\nimport Stream from '../Stream'\nimport Client from '../Client'\nimport {\n  b64Decode,\n  buildUserIntroTopic,\n  buildUserInviteTopic,\n  dateToNs,\n  nsToDate,\n} from '../utils'\nimport { PublicKeyBundle } from '../crypto'\nimport { SortDirection } from '../ApiClient'\nimport Long from 'long'\n\nconst CLOCK_SKEW_OFFSET_MS = 10000\n\nconst messageHasHeaders = (msg: MessageV1): boolean => {\n  return Boolean(msg.recipientAddress && msg.senderAddress)\n}\n\ntype CacheLoader = (args: {\n  latestSeen: Date | undefined\n  existing: Conversation[]\n}) => Promise<Conversation[]>\n\nexport class ConversationCache {\n  private conversations: Conversation[]\n  private mutex: Mutex\n  private latestSeen?: Date\n  private seenTopics: Set<string>\n\n  constructor() {\n    this.conversations = []\n    this.mutex = new Mutex()\n    this.seenTopics = new Set()\n  }\n\n  async load(loader: CacheLoader) {\n    const release = await this.mutex.acquire()\n    try {\n      const newConvos = await loader({\n        latestSeen: this.latestSeen,\n        existing: this.conversations,\n      })\n      for (const convo of newConvos) {\n        if (!this.seenTopics.has(convo.topic)) {\n          this.seenTopics.add(convo.topic)\n          this.conversations.push(convo)\n          if (!this.latestSeen || convo.createdAt > this.latestSeen) {\n            this.latestSeen = convo.createdAt\n          }\n        }\n      }\n      // No catch block so that errors still bubble\n    } finally {\n      release()\n    }\n\n    return [...this.conversations]\n  }\n}\n\n/**\n * Conversations allows you to view ongoing 1:1 messaging sessions with another wallet\n */\nexport default class Conversations {\n  private client: Client\n  private v1Cache: ConversationCache\n  private v2Mutex: Mutex\n\n  constructor(client: Client) {\n    this.client = client\n    this.v1Cache = new ConversationCache()\n    this.v2Mutex = new Mutex()\n  }\n\n  /**\n   * List all conversations with the current wallet found in the network.\n   */\n  async list(): Promise<Conversation[]> {\n    const [v1Convos, v2Convos] = await Promise.all([\n      this.listV1Conversations(),\n      this.listV2Conversations(),\n    ])\n\n    const conversations = v1Convos.concat(v2Convos)\n\n    conversations.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime())\n    return conversations\n  }\n\n  private async listV1Conversations(): Promise<Conversation[]> {\n    return this.v1Cache.load(async ({ latestSeen }) => {\n      const seenPeers = await this.getIntroductionPeers({\n        startTime: latestSeen\n          ? new Date(+latestSeen - CLOCK_SKEW_OFFSET_MS)\n          : undefined,\n        direction: SortDirection.SORT_DIRECTION_ASCENDING,\n      })\n\n      return Array.from(seenPeers).map(\n        ([peerAddress, sent]) =>\n          new ConversationV1(this.client, peerAddress, sent)\n      )\n    })\n  }\n\n  /**\n   * List all V2 conversations\n   */\n  private async listV2Conversations(): Promise<Conversation[]> {\n    return this.v2Mutex.runExclusive(async () => {\n      // Get all conversations already in the KeyStore\n      const existing = await this.getV2ConversationsFromKeystore()\n      const latestConversation = existing.reduce(\n        (memo: ConversationV2 | undefined, curr: ConversationV2) => {\n          if (!memo || +curr.createdAt > +memo.createdAt) {\n            return curr\n          }\n          return memo\n        },\n        undefined\n      )\n\n      // Load all conversations started after the newest conversation found\n      const newConversations = await this.updateV2Conversations(\n        latestConversation?.createdAt\n      )\n\n      // Create a Set of all the existing topics to ensure no duplicates are added\n      const existingTopics = new Set(existing.map((c) => c.topic))\n      // Add all new conversations to the existing list\n      for (const convo of newConversations) {\n        if (!existingTopics.has(convo.topic)) {\n          existing.push(convo)\n          existingTopics.add(convo.topic)\n        }\n      }\n\n      // Sort the result set by creation time in ascending order\n      existing.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime())\n      return existing\n    })\n  }\n\n  private async getV2ConversationsFromKeystore(): Promise<ConversationV2[]> {\n    return (await this.client.keystore.getV2Conversations()).map(\n      this.conversationReferenceToV2.bind(this)\n    )\n  }\n\n  // Called in listV2Conversations and in newConversation\n  async updateV2Conversations(startTime?: Date): Promise<ConversationV2[]> {\n    const envelopes = await this.client.listInvitations({\n      startTime: startTime\n        ? new Date(+startTime - CLOCK_SKEW_OFFSET_MS)\n        : undefined,\n      direction: SortDirection.SORT_DIRECTION_ASCENDING,\n    })\n\n    return this.decodeInvites(envelopes)\n  }\n\n  private async decodeInvites(\n    envelopes: messageApi.Envelope[],\n    shouldThrow = false\n  ): Promise<ConversationV2[]> {\n    const { responses } = await this.client.keystore.saveInvites({\n      requests: envelopes.map((env) => ({\n        payload: b64Decode(env.message as unknown as string),\n        timestampNs: Long.fromString(env.timestampNs as string),\n        contentTopic: env.contentTopic as string,\n      })),\n    })\n\n    const out: ConversationV2[] = []\n    for (const response of responses) {\n      try {\n        const convo = this.saveInviteResponseToConversation(response)\n        out.push(convo)\n      } catch (e) {\n        console.warn('Error saving invite response to conversation: ', e)\n        if (shouldThrow) {\n          throw e\n        }\n      }\n    }\n    return out\n  }\n\n  private saveInviteResponseToConversation({\n    result,\n    error,\n  }: keystore.SaveInvitesResponse_Response): ConversationV2 {\n    if (error || !result || !result.conversation) {\n      throw new Error(`Error from keystore: ${error?.code} ${error?.message}}`)\n    }\n    return this.conversationReferenceToV2(result.conversation)\n  }\n\n  private conversationReferenceToV2(\n    convoRef: conversationReference.ConversationReference\n  ): ConversationV2 {\n    return new ConversationV2(\n      this.client,\n      convoRef.topic,\n      convoRef.peerAddress,\n      nsToDate(convoRef.createdNs),\n      convoRef.context\n    )\n  }\n\n  /**\n   * Returns a stream of any newly created conversations.\n   * Will dedupe to not return the same conversation twice in the same stream.\n   * Does not dedupe any other previously seen conversations\n   */\n  async stream(): Promise<Stream<Conversation>> {\n    const seenPeers: Set<string> = new Set()\n    const introTopic = buildUserIntroTopic(this.client.address)\n    const inviteTopic = buildUserInviteTopic(this.client.address)\n\n    const newPeer = (peerAddress: string): boolean => {\n      // Check if we have seen the peer already in this stream\n      if (seenPeers.has(peerAddress)) {\n        return false\n      }\n      seenPeers.add(peerAddress)\n      return true\n    }\n\n    const decodeConversation = async (env: messageApi.Envelope) => {\n      if (env.contentTopic === introTopic) {\n        const messageBytes = b64Decode(env.message as unknown as string)\n        const msg = await MessageV1.fromBytes(messageBytes)\n        const peerAddress = this.getPeerAddress(msg)\n        if (!newPeer(peerAddress)) {\n          return undefined\n        }\n        await msg.decrypt(this.client.keystore, this.client.publicKeyBundle)\n        return new ConversationV1(this.client, peerAddress, msg.sent)\n      }\n      if (env.contentTopic === inviteTopic) {\n        const results = await this.decodeInvites([env], true)\n        if (results.length) {\n          return results[0]\n        }\n      }\n      throw new Error('unrecognized invite topic')\n    }\n\n    return Stream.create<Conversation>(\n      this.client,\n      [inviteTopic, introTopic],\n      decodeConversation.bind(this)\n    )\n  }\n\n  /**\n   * Streams messages from all conversations.\n   *\n   * When a new conversation is initiated with the client's address, this function will automatically register it and add it to the list of conversations to watch.\n   * Callers should be aware the first messages in a newly created conversation are picked up on a best effort basis and there are other potential race conditions which may cause some newly created conversations to be missed.\n   *\n   */\n  async streamAllMessages(): Promise<AsyncGenerator<DecodedMessage>> {\n    const introTopic = buildUserIntroTopic(this.client.address)\n    const inviteTopic = buildUserInviteTopic(this.client.address)\n    const topics = new Set<string>([introTopic, inviteTopic])\n    const convoMap = new Map<string, Conversation>()\n\n    for (const conversation of await this.list()) {\n      topics.add(conversation.topic)\n      convoMap.set(conversation.topic, conversation)\n    }\n\n    const decodeMessage = async (\n      env: messageApi.Envelope\n    ): Promise<Conversation | DecodedMessage | null> => {\n      const contentTopic = env.contentTopic\n      if (!contentTopic) {\n        return null\n      }\n\n      if (contentTopic === introTopic) {\n        const messageBytes = b64Decode(env.message as unknown as string)\n        const msg = await MessageV1.fromBytes(messageBytes)\n        if (!messageHasHeaders(msg)) {\n          return null\n        }\n        const peerAddress = this.getPeerAddress(msg)\n\n        // Temporarily create a convo to decrypt the message\n        const convo = new ConversationV1(\n          this.client,\n          peerAddress as string,\n          msg.sent\n        )\n\n        // TODO: This duplicates the proto deserialization unnecessarily\n        // Refactor to avoid duplicate work\n        return convo.decodeMessage(env)\n      }\n\n      // Decode as an invite and return the envelope\n      // This gives the contentTopicUpdater everything it needs to add to the topic list\n      if (contentTopic === inviteTopic) {\n        const results = await this.decodeInvites([env], true)\n        return results[0]\n      }\n\n      const convo = convoMap.get(contentTopic)\n\n      // Decode as a V1 message if the topic matches a V1 convo\n      if (convo instanceof ConversationV1) {\n        return convo.decodeMessage(env)\n      }\n\n      // Decode as a V2 message if the topic matches a V2 convo\n      if (convo instanceof ConversationV2) {\n        return convo.decodeMessage(env)\n      }\n\n      console.log('Unknown topic')\n\n      throw new Error('Unknown topic')\n    }\n\n    const addConvo = (topic: string, conversation: Conversation): boolean => {\n      if (topics.has(topic)) {\n        return false\n      }\n      convoMap.set(topic, conversation)\n      topics.add(topic)\n      return true\n    }\n\n    const contentTopicUpdater = (msg: Conversation | DecodedMessage | null) => {\n      // If we have a V1 message from the introTopic, store the conversation in our mapping\n      if (msg instanceof DecodedMessage && msg.contentTopic === introTopic) {\n        const convo = new ConversationV1(\n          this.client,\n          msg.recipientAddress === this.client.address\n            ? (msg.senderAddress as string)\n            : (msg.recipientAddress as string),\n          msg.sent\n        )\n        const isNew = addConvo(convo.topic, convo)\n\n        return isNew ? Array.from(topics.values()) : undefined\n      }\n\n      if (msg instanceof ConversationV2) {\n        const isNew = addConvo(msg.topic, msg)\n\n        return isNew ? Array.from(topics.values()) : undefined\n      }\n\n      return undefined\n    }\n\n    const str = await Stream.create<DecodedMessage | Conversation | null>(\n      this.client,\n      Array.from(topics.values()),\n      decodeMessage,\n      contentTopicUpdater\n    )\n\n    return (async function* generate() {\n      for await (const val of str) {\n        if (val instanceof DecodedMessage) {\n          yield val\n        }\n        // For conversation V2, we may have messages in the new topic before we started streaming.\n        // To be safe, we fetch all messages\n        if (val instanceof ConversationV2) {\n          for (const convoMessage of await val.messages()) {\n            yield convoMessage\n          }\n        }\n      }\n    })()\n  }\n\n  private async getIntroductionPeers(\n    opts?: ListMessagesOptions\n  ): Promise<Map<string, Date>> {\n    const topic = buildUserIntroTopic(this.client.address)\n    const messages = await this.client.listEnvelopes(\n      topic,\n      (env) => {\n        return MessageV1.fromBytes(b64Decode(env.message as unknown as string))\n      },\n      opts\n    )\n    const seenPeers: Map<string, Date> = new Map()\n    for (const message of messages) {\n      // Ignore all messages without sender or recipient address headers\n      // Makes getPeerAddress safe\n      if (!messageHasHeaders(message)) {\n        continue\n      }\n\n      const peerAddress = this.getPeerAddress(message)\n\n      if (peerAddress) {\n        const have = seenPeers.get(peerAddress)\n        if (!have || have > message.sent) {\n          try {\n            // Verify that the message can be decrypted before treating the intro as valid\n            await message.decrypt(\n              this.client.keystore,\n              this.client.publicKeyBundle\n            )\n            seenPeers.set(peerAddress, message.sent)\n          } catch (e) {\n            continue\n          }\n        }\n      }\n    }\n\n    return seenPeers\n  }\n\n  /**\n   * Creates a new conversation for the given address. Will throw an error if the peer is not found in the XMTP network\n   */\n  async newConversation(\n    peerAddress: string,\n    context?: InvitationContext\n  ): Promise<Conversation> {\n    let contact = await this.client.getUserContact(peerAddress)\n    if (!contact) {\n      throw new Error(`Recipient ${peerAddress} is not on the XMTP network`)\n    }\n\n    if (peerAddress === this.client.address) {\n      throw new Error('self messaging not supported')\n    }\n\n    // If this is a V1 conversation continuation\n    if (contact instanceof PublicKeyBundle && !context?.conversationId) {\n      return new ConversationV1(this.client, peerAddress, new Date())\n    }\n\n    // If no conversationId, check and see if we have an existing V1 conversation\n    if (!context?.conversationId) {\n      const v1Convos = await this.listV1Conversations()\n      const matchingConvo = v1Convos.find(\n        (convo) => convo.peerAddress === peerAddress\n      )\n      // If intro already exists, return V1 conversation\n      // if both peers have V1 compatible key bundles\n      if (matchingConvo) {\n        if (!this.client.signedPublicKeyBundle.isFromLegacyBundle()) {\n          throw new Error(\n            'cannot resume pre-existing V1 conversation; client keys not compatible'\n          )\n        }\n        if (\n          !(contact instanceof PublicKeyBundle) &&\n          !contact.isFromLegacyBundle()\n        ) {\n          throw new Error(\n            'cannot resume pre-existing V1 conversation; peer keys not compatible'\n          )\n        }\n        return matchingConvo\n      }\n    }\n\n    // Coerce the contact into a V2 bundle\n    if (contact instanceof PublicKeyBundle) {\n      contact = SignedPublicKeyBundle.fromLegacyBundle(contact)\n    }\n\n    // Define a function for matching V2 conversations\n    const matcherFn = (convo: Conversation) =>\n      convo.peerAddress === peerAddress &&\n      isMatchingContext(context, convo.context ?? undefined)\n\n    return this.v2Mutex.runExclusive(async () => {\n      const existing = await this.getV2ConversationsFromKeystore()\n      const existingMatch = existing.find(matcherFn)\n      if (existingMatch) {\n        return existingMatch\n      }\n      const latestSeen = existing[existing.length - 1]?.createdAt\n      const newItems = await this.updateV2Conversations(latestSeen)\n      const newItemMatch = newItems.find(matcherFn)\n      // If one of those matches, return it to update the cache\n      if (newItemMatch) {\n        return newItemMatch\n      }\n\n      return this.createV2Convo(contact as SignedPublicKeyBundle, context)\n    })\n  }\n\n  private async createV2Convo(\n    recipient: SignedPublicKeyBundle,\n    context?: InvitationContext\n  ): Promise<ConversationV2> {\n    const timestamp = new Date()\n    const { payload, conversation } = await this.client.keystore.createInvite({\n      recipient,\n      context,\n      createdNs: dateToNs(timestamp),\n    })\n    if (!payload || !conversation) {\n      throw new Error('Required field not returned from Keystore')\n    }\n\n    const peerAddress = await recipient.walletSignatureAddress()\n\n    await this.client.publishEnvelopes([\n      {\n        contentTopic: buildUserInviteTopic(peerAddress),\n        message: payload,\n        timestamp,\n      },\n      {\n        contentTopic: buildUserInviteTopic(this.client.address),\n        message: payload,\n        timestamp,\n      },\n    ])\n\n    return this.conversationReferenceToV2(conversation)\n  }\n\n  private getPeerAddress(message: MessageV1): string {\n    const peerAddress =\n      message.recipientAddress === this.client.address\n        ? message.senderAddress\n        : message.recipientAddress\n\n    // This assertion is safe, so long as messages have been through the filter\n    return peerAddress as string\n  }\n}\n\nfunction isMatchingContext(\n  contextA?: InvitationContext,\n  contextB?: InvitationContext\n): boolean {\n  // Use == to allow null and undefined to be equivalent\n  return contextA?.conversationId === contextB?.conversationId\n}\n","import { messageApi } from '@xmtp/proto'\nimport { NotifyStreamEntityArrival } from '@xmtp/proto/ts/dist/types/fetch.pb'\nimport { retry, sleep, toNanoString } from './utils'\nimport AuthCache from './authn/AuthCache'\nimport { Authenticator } from './authn'\nimport packageJson from '../package.json'\nimport { XMTP_DEV_WARNING } from './constants'\nimport { Flatten } from './utils/typedefs'\nexport const { MessageApi, SortDirection } = messageApi\n\nconst RETRY_SLEEP_TIME = 100\nconst ERR_CODE_UNAUTHENTICATED = 16\n\nconst clientVersionHeaderKey = 'X-Client-Version'\nconst appVersionHeaderKey = 'X-App-Version'\n\nexport const ApiUrls = {\n  local: 'http://localhost:5555',\n  dev: 'https://dev.xmtp.network',\n  production: 'https://production.xmtp.network',\n} as const\n\nexport enum GrpcStatus {\n  OK = 0,\n  CANCELLED,\n  UNKNOWN,\n  INVALID_ARGUMENT,\n  DEADLINE_EXCEEDED,\n  NOT_FOUND,\n  ALREADY_EXISTS,\n  PERMISSION_DENIED,\n  RESOURCE_EXHAUSTED,\n  FAILED_PRECONDITION,\n  ABORTED,\n  OUT_OF_RANGE,\n  UNIMPLEMENTED,\n  INTERNAL,\n  UNAVAILABLE,\n  DATA_LOSS,\n  UNAUTHENTICATED,\n}\n\nexport class GrpcError extends Error {\n  code: GrpcStatus\n\n  constructor(message: string, code: GrpcStatus) {\n    super(message)\n    this.code = code\n  }\n\n  static fromObject(err: { code: GrpcStatus; message: string }): GrpcError {\n    return new GrpcError(err.message, err.code)\n  }\n}\n\nexport type QueryParams = {\n  startTime?: Date\n  endTime?: Date\n  contentTopic: string\n}\n\nexport type QueryAllOptions = {\n  direction?: messageApi.SortDirection\n  limit?: number\n}\n\nexport type QueryStreamOptions = Flatten<\n  Omit<QueryAllOptions, 'limit'> & {\n    pageSize?: number\n  }\n>\n\n// All of the fields in both QueryParams and QueryStreamOptions\nexport type Query = Flatten<QueryParams & QueryStreamOptions>\n\nexport type PublishParams = {\n  contentTopic: string\n  message: Uint8Array\n  timestamp?: Date\n}\n\nexport type SubscribeParams = {\n  contentTopics: string[]\n}\n\nexport type ApiClientOptions = {\n  maxRetries?: number\n  appVersion?: string\n}\n\nexport type SubscribeCallback = NotifyStreamEntityArrival<messageApi.Envelope>\n\nexport type UnsubscribeFn = () => Promise<void>\n\nconst isAbortError = (err?: Error): boolean => {\n  if (!err) {\n    return false\n  }\n  if (err.name === 'AbortError' || err.message.includes('aborted')) {\n    return true\n  }\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isAuthError = (err?: GrpcError | Error): boolean => {\n  if (err && 'code' in err && err.code === ERR_CODE_UNAUTHENTICATED) {\n    return true\n  }\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isNotAuthError = (err?: Error): boolean => !isAuthError(err)\n\n/**\n * ApiClient provides a wrapper for calling the GRPC Gateway generated code.\n * It adds some helpers for dealing with paginated data and automatically retries idempotent calls\n */\nexport default class ApiClient {\n  pathPrefix: string\n  maxRetries: number\n  private authCache?: AuthCache\n  appVersion: string | undefined\n  version: string\n\n  constructor(pathPrefix: string, opts?: ApiClientOptions) {\n    this.pathPrefix = pathPrefix\n    this.maxRetries = opts?.maxRetries || 5\n    this.appVersion = opts?.appVersion\n    this.version = 'xmtp-js/' + packageJson.version\n\n    if (pathPrefix === ApiUrls.dev) {\n      console.info(XMTP_DEV_WARNING)\n    }\n  }\n\n  // Raw method for querying the API\n  private async _query(\n    req: messageApi.QueryRequest\n  ): ReturnType<typeof MessageApi.Query> {\n    try {\n      return await retry(\n        MessageApi.Query,\n        [\n          req,\n          {\n            pathPrefix: this.pathPrefix,\n            mode: 'cors',\n            headers: this.headers(),\n          },\n        ],\n        this.maxRetries,\n        RETRY_SLEEP_TIME\n      )\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      throw GrpcError.fromObject(e)\n    }\n  }\n\n  // Raw method for batch-querying the API\n  private _batchQuery(\n    req: messageApi.BatchQueryRequest\n  ): ReturnType<typeof MessageApi.BatchQuery> {\n    return retry(\n      MessageApi.BatchQuery,\n      [\n        req,\n        {\n          pathPrefix: this.pathPrefix,\n          mode: 'cors',\n          headers: this.headers(),\n        },\n      ],\n      this.maxRetries,\n      RETRY_SLEEP_TIME\n    )\n  }\n\n  // Raw method for publishing to the API\n  private async _publish(\n    req: messageApi.PublishRequest,\n    attemptNumber = 0\n  ): ReturnType<typeof MessageApi.Publish> {\n    const authToken = await this.getToken()\n    const headers = this.headers()\n    headers.set('Authorization', `Bearer ${authToken}`)\n    try {\n      return await retry(\n        MessageApi.Publish,\n        [\n          req,\n          {\n            pathPrefix: this.pathPrefix,\n            mode: 'cors',\n            headers,\n          },\n        ],\n        this.maxRetries,\n        RETRY_SLEEP_TIME,\n        // Do not retry UnauthenticatedErrors\n        isNotAuthError\n      )\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      // Try at most 2X. If refreshing the auth token doesn't work the first time, it won't work the second time\n      if (isNotAuthError(e) || attemptNumber >= 1) {\n        throw GrpcError.fromObject(e)\n      }\n      await this.authCache?.refresh()\n      return this._publish(req, attemptNumber + 1)\n    }\n  }\n\n  // Raw method for subscribing\n  private _subscribe(\n    req: messageApi.SubscribeRequest,\n    cb: NotifyStreamEntityArrival<messageApi.Envelope>\n  ): UnsubscribeFn {\n    const abortController = new AbortController()\n\n    const doSubscribe = async () => {\n      while (true) {\n        const startTime = new Date().getTime()\n        try {\n          await MessageApi.Subscribe(req, cb, {\n            pathPrefix: this.pathPrefix,\n            signal: abortController.signal,\n            mode: 'cors',\n            headers: this.headers(),\n          })\n          if (abortController.signal.aborted) {\n            return\n          }\n          console.info('Stream connection closed. Resubscribing')\n          if (new Date().getTime() - startTime < 1000) {\n            await sleep(1000)\n          }\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (err: any) {\n          if (isAbortError(err) || abortController.signal.aborted) {\n            return\n          }\n          console.info(\n            'Stream connection closed. Resubscribing',\n            err.toString()\n          )\n          if (new Date().getTime() - startTime < 1000) {\n            await sleep(1000)\n          }\n        }\n      }\n    }\n    doSubscribe()\n\n    return async () => {\n      abortController?.abort()\n    }\n  }\n\n  // Use the Query API to return the full contents of any specified topics\n  async query(\n    params: QueryParams,\n    {\n      direction = SortDirection.SORT_DIRECTION_ASCENDING,\n      limit,\n    }: QueryAllOptions\n  ): Promise<messageApi.Envelope[]> {\n    const out: messageApi.Envelope[] = []\n    // Use queryIteratePages for better performance. 1/100th the number of Promises to resolve compared to queryStream\n    for await (const page of this.queryIteratePages(params, {\n      direction,\n      // If there is a limit of < 100, use that as the page size. Otherwise use 100 and stop if/when limit reached.\n      pageSize: limit && limit < 100 ? limit : 100,\n    })) {\n      for (const envelope of page) {\n        out.push(envelope)\n        if (limit && out.length === limit) {\n          return out\n        }\n      }\n    }\n    return out\n  }\n\n  // Will produce an AsyncGenerator of Envelopes\n  // Uses queryStreamPages under the hood\n  async *queryIterator(\n    params: QueryParams,\n    options: QueryStreamOptions\n  ): AsyncGenerator<messageApi.Envelope> {\n    for await (const page of this.queryIteratePages(params, options)) {\n      for (const envelope of page) {\n        yield envelope\n      }\n    }\n  }\n\n  // Creates an async generator that will paginate through the Query API until it reaches the end\n  // Will yield each page of results as needed\n  async *queryIteratePages(\n    { contentTopic, startTime, endTime }: QueryParams,\n    { direction, pageSize = 10 }: QueryStreamOptions\n  ): AsyncGenerator<messageApi.Envelope[]> {\n    if (!contentTopic || !contentTopic.length) {\n      throw new Error('Must specify content topics')\n    }\n\n    const startTimeNs = toNanoString(startTime)\n    const endTimeNs = toNanoString(endTime)\n    let cursor: messageApi.Cursor | undefined\n\n    while (true) {\n      const pagingInfo: messageApi.PagingInfo = {\n        limit: pageSize,\n        direction,\n        cursor,\n      }\n\n      const result = await this._query({\n        contentTopics: [contentTopic],\n        startTimeNs,\n        endTimeNs,\n        pagingInfo,\n      })\n\n      if (result.envelopes?.length) {\n        yield result.envelopes\n      } else {\n        return\n      }\n\n      if (result.pagingInfo?.cursor) {\n        cursor = result.pagingInfo?.cursor\n      } else {\n        return\n      }\n    }\n  }\n\n  // Take a list of queries and execute them in batches\n  async batchQuery(queries: Query[]): Promise<messageApi.Envelope[][]> {\n    // Group queries into batches of 50 (implicit server-side limit) and then perform BatchQueries\n    const BATCH_SIZE = 50\n    // Keep a list of BatchQueryRequests to execute all at once later\n    const batchRequests: messageApi.BatchQueryRequest[] = []\n\n    // Assemble batches\n    for (let i = 0; i < queries.length; i += BATCH_SIZE) {\n      const queriesInBatch = queries.slice(i, i + BATCH_SIZE)\n      // Perform batch query by first compiling a list of repeated individual QueryRequests\n      // then populating a BatchQueryRequest with that list\n      const constructedQueries: messageApi.QueryRequest[] = []\n\n      for (const queryParams of queriesInBatch) {\n        constructedQueries.push({\n          contentTopics: [queryParams.contentTopic],\n          startTimeNs: toNanoString(queryParams.startTime),\n          endTimeNs: toNanoString(queryParams.endTime),\n          pagingInfo: {\n            limit: queryParams.pageSize || 10,\n            direction:\n              queryParams.direction || SortDirection.SORT_DIRECTION_ASCENDING,\n          },\n        })\n      }\n      const batchQueryRequest = {\n        requests: constructedQueries,\n      }\n      batchRequests.push(batchQueryRequest)\n    }\n\n    // Execute batches\n    const batchQueryResponses = await Promise.all(\n      batchRequests.map(async (batch) => this._batchQuery(batch))\n    )\n\n    // For every batch, read all responses within the batch, and add to a list of lists of envelopes\n    // one top-level list for every original query\n    const allEnvelopes: messageApi.Envelope[][] = []\n    for (const batchResponse of batchQueryResponses) {\n      if (!batchResponse.responses) {\n        // An error on any of the batch query is propagated to the caller\n        // for simplicity, rather than trying to return partial results\n        throw new Error('BatchQueryResponse missing responses')\n      }\n      for (const queryResponse of batchResponse.responses) {\n        if (queryResponse.envelopes) {\n          allEnvelopes.push(queryResponse.envelopes)\n        } else {\n          // If no envelopes provided, then add an empty list\n          allEnvelopes.push([])\n        }\n      }\n    }\n    return allEnvelopes\n  }\n\n  // Publish a message to the network\n  // Will convert timestamps to the appropriate format expected by the network\n  async publish(\n    messages: PublishParams[]\n  ): ReturnType<typeof MessageApi.Publish> {\n    const toSend: messageApi.Envelope[] = []\n    for (const { contentTopic, message, timestamp } of messages) {\n      if (!contentTopic.length) {\n        throw new Error('Content topic cannot be empty string')\n      }\n\n      if (!message.length) {\n        throw new Error('0 length messages not allowed')\n      }\n\n      const dt = timestamp || new Date()\n      toSend.push({\n        contentTopic,\n        timestampNs: toNanoString(dt),\n        message: Uint8Array.from(message),\n      })\n    }\n\n    return this._publish({ envelopes: toSend })\n  }\n\n  // Subscribe to a list of topics.\n  // Provided callback function will be called on each new message\n  // Returns an unsubscribe function that can be used to end the subscription\n  subscribe(\n    params: SubscribeParams,\n    callback: SubscribeCallback\n  ): UnsubscribeFn {\n    if (!params.contentTopics.length) {\n      throw new Error('Must provide list of contentTopics to subscribe to')\n    }\n\n    return this._subscribe(params, callback)\n  }\n\n  private getToken(): Promise<string> {\n    if (!this.authCache) {\n      throw new Error('AuthCache is not set on API Client')\n    }\n    return this.authCache.getToken()\n  }\n\n  setAuthenticator(\n    authenticator: Authenticator,\n    cacheExpirySeconds?: number\n  ): void {\n    this.authCache = new AuthCache(authenticator, cacheExpirySeconds)\n  }\n\n  headers(): Headers {\n    const headers = new Headers()\n    headers.set(clientVersionHeaderKey, this.version)\n    if (this.appVersion) {\n      headers.set(appVersionHeaderKey, this.appVersion)\n    }\n    return headers\n  }\n}\n","import { Authenticator } from './interfaces'\nimport Token from './Token'\n\n// Default to 10 seconds less than expected expiry to give some wiggle room near the end\n// https://github.com/xmtp/xmtp-node-go/blob/main/pkg/api/authentication.go#L18\nconst DEFAULT_MAX_AGE_SECONDS = 60 * 60 - 10\n\nexport default class AuthCache {\n  private authenticator: Authenticator\n  private token?: Token\n  maxAgeMs: number\n\n  constructor(\n    authenticator: Authenticator,\n    cacheExpirySeconds = DEFAULT_MAX_AGE_SECONDS\n  ) {\n    this.authenticator = authenticator\n    this.maxAgeMs = cacheExpirySeconds * 1000\n  }\n\n  async getToken(): Promise<string> {\n    if (!this.token || this.token.ageMs > this.maxAgeMs) {\n      await this.refresh()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.token!.toBase64()\n  }\n\n  async refresh(): Promise<void> {\n    this.token = await this.authenticator.createToken()\n  }\n}\n","{\n  \"name\": \"@xmtp/xmtp-js\",\n  \"version\": \"9.1.6\",\n  \"description\": \"XMTP client SDK for interacting with XMTP networks.\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"module\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"browser\": \"dist/web/index.js\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"browser\": \"./dist/web/index.js\",\n      \"import\": \"./dist/index.js\",\n      \"require\": \"./dist/index.cjs\"\n    }\n  },\n  \"scripts\": {\n    \"prebench\": \"npm run build:bench\",\n    \"bench\": \"node dist/bench/index.cjs\",\n    \"build\": \"npm run clean:dist && npm run build:node && npm run build:web\",\n    \"build:bench\": \"tsup --out-dir dist/bench --entry.0 bench/index.ts --format cjs\",\n    \"build:node\": \"tsup\",\n    \"build:web\": \"tsup --platform browser --target esnext\",\n    \"build:docs\": \"rimraf docs && mkdir -p tmp && cp README.md tmp/ && sed -i.bak '/badge.svg/d' tmp/README.md && typedoc --excludePrivate --readme tmp/README.md src/index.ts\",\n    \"clean\": \"npm run clean:dist && npm run clean:proto\",\n    \"clean:dist\": \"rimraf dist\",\n    \"clean:proto\": \"rimraf -g src/proto/*.ts\",\n    \"package\": \"npm pack\",\n    \"prepublishOnly\": \"npm run build\",\n    \"test:setup\": \"./dev/up\",\n    \"test:teardown\": \"./dev/down\",\n    \"test\": \"npm run test:node\",\n    \"test:node\": \"jest --no-cache --env='node' --testTimeout=30000\",\n    \"test:jsdom\": \"jest --no-cache --env='./jest.jsdom.env.cjs' --testTimeout=30000\",\n    \"test:cov\": \"jest --coverage --no-cache --runInBand\",\n    \"lint\": \"prettier --check . && eslint .\",\n    \"autolint\": \"prettier --write . && eslint --fix .\",\n    \"semantic-release\": \"semantic-release\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"provenance\": true\n  },\n  \"files\": [\n    \"dist/index.cjs\",\n    \"dist/index.cjs.map\",\n    \"dist/index.d.ts\",\n    \"dist/index.js\",\n    \"dist/index.js.map\",\n    \"dist/web/index.js\",\n    \"dist/web/index.js.map\"\n  ],\n  \"keywords\": [\n    \"xmtp\",\n    \"messaging\",\n    \"web3\",\n    \"sdk\",\n    \"js\",\n    \"javascript\",\n    \"node\",\n    \"nodejs\"\n  ],\n  \"author\": \"XMTP Labs <eng@xmtp.com>\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/xmtp/xmtp-js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https:git@github.com:xmtp/xmtp-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/xmtp/xmtp-js/issues\"\n  },\n  \"release\": {\n    \"branches\": [\n      \"main\",\n      {\n        \"name\": \"beta\",\n        \"prerelease\": true\n      }\n    ]\n  },\n  \"dependencies\": {\n    \"@noble/secp256k1\": \"^1.5.2\",\n    \"@xmtp/proto\": \"^3.24.0\",\n    \"async-mutex\": \"^0.4.0\",\n    \"elliptic\": \"^6.5.4\",\n    \"ethers\": \"^5.5.3\",\n    \"long\": \"^5.2.0\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^16.1.0\",\n    \"@commitlint/config-conventional\": \"^16.0.0\",\n    \"@types/benchmark\": \"^2.1.2\",\n    \"@types/bl\": \"^5.0.2\",\n    \"@types/callback-to-async-iterator\": \"^1.1.4\",\n    \"@types/elliptic\": \"^6.4.14\",\n    \"@types/jest\": \"^28.1.3\",\n    \"@types/node\": \"^18.14.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.38.0\",\n    \"@typescript-eslint/parser\": \"^5.38.0\",\n    \"benny\": \"^3.7.1\",\n    \"dd-trace\": \"^2.12.2\",\n    \"esbuild\": \"^0.17.16\",\n    \"esbuild-plugin-external-global\": \"^1.0.1\",\n    \"eslint\": \"^8.0.1\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-config-standard\": \"^17.0.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jsdoc\": \"^37.9.1\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-promise\": \"^6.0.1\",\n    \"husky\": \"^7.0.4\",\n    \"jest\": \"^28.1.3\",\n    \"jest-environment-jsdom\": \"^28.1.3\",\n    \"prettier\": \"^2.4.0\",\n    \"rimraf\": \"^5.0.0\",\n    \"semantic-release\": \"^21.0.3\",\n    \"ts-jest\": \"^28.0.0\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsup\": \"^6.7.0\",\n    \"typedoc\": \"^0.22.11\",\n    \"typescript\": \"^4.4.3\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  }\n}\n","export const XMTP_DEV_WARNING = `\nXX    XX MM    MM TTTTTT PPPPPP   DDDDD   EEEEEEE VV     VV \n XX  XX  MMM  MMM   TT   PP   PP  DD  DD  EE      VV     VV \n  XXXX   MM MM MM   TT   PPPPPP   DD   DD EEEEE    VV   VV  \n XX  XX  MM    MM   TT   PP       DD   DD EE        VV VV   \nXX    XX MM    MM   TT   PP       DDDDDD  EEEEEEE    VVV    \n\nConnected to the XMTP 'dev' network. Use 'production' for production messages.\nhttps://github.com/xmtp/xmtp-js#xmtp-production-and-dev-network-environments\n`\n","import { contact, publicKey } from '@xmtp/proto'\nimport { PublicKeyBundle, SignedPublicKeyBundle } from './crypto'\n\n// Decodes contact bundles from the contact topic.\nexport function decodeContactBundle(\n  bytes: Uint8Array\n): PublicKeyBundle | SignedPublicKeyBundle {\n  let cb: contact.ContactBundle\n  try {\n    cb = contact.ContactBundle.decode(bytes)\n  } catch (e) {\n    const pb = publicKey.PublicKeyBundle.decode(bytes)\n    cb = { v1: { keyBundle: new PublicKeyBundle(pb) }, v2: undefined }\n  }\n  if (cb.v1?.keyBundle) {\n    return new PublicKeyBundle(cb.v1.keyBundle)\n  }\n  if (cb.v2?.keyBundle) {\n    return new SignedPublicKeyBundle(cb.v2.keyBundle)\n  }\n  throw new Error('unknown or invalid contact bundle')\n}\n\n// Encodes public key bundle for the contact topic.\nexport function encodeContactBundle(\n  bundle: PublicKeyBundle | SignedPublicKeyBundle\n): Uint8Array {\n  if (bundle instanceof PublicKeyBundle) {\n    return contact.ContactBundle.encode({\n      v1: { keyBundle: bundle },\n      v2: undefined,\n    }).finish()\n  } else {\n    return contact.ContactBundle.encode({\n      v1: undefined,\n      v2: { keyBundle: bundle },\n    }).finish()\n  }\n}\n","import { keccak256 } from 'js-sha3'\nimport { authn, signature, publicKey } from '@xmtp/proto'\nimport AuthData from './AuthData'\nimport { PrivateKey } from '../crypto'\nimport { hexToBytes } from '../crypto/utils'\nimport Token from './Token'\n\nexport default class LocalAuthenticator {\n  private identityKey: PrivateKey\n\n  constructor(identityKey: PrivateKey) {\n    if (!identityKey.publicKey.signature) {\n      throw new Error('Provided public key is not signed')\n    }\n\n    this.identityKey = identityKey\n  }\n\n  async createToken(timestamp?: Date): Promise<Token> {\n    const authData = AuthData.create(\n      this.identityKey.publicKey.walletSignatureAddress(),\n      timestamp || new Date()\n    )\n    const authDataBytes = authData.toBytes()\n    const digest = keccak256(authDataBytes)\n    const authSig = await this.identityKey.sign(hexToBytes(digest))\n\n    return new Token(\n      authn.Token.fromPartial({\n        identityKey: publicKey.PublicKey.fromPartial(\n          // The generated types are overly strict and don't like our additional methods\n          // eslint-disable-next-line\n          // @ts-ignore\n          this.identityKey.publicKey\n        ),\n        authDataBytes,\n        // The generated types are overly strict and don't like our additional methods\n        // eslint-disable-next-line\n        // @ts-ignore\n        authDataSignature: signature.Signature.fromPartial(authSig),\n      })\n    )\n  }\n}\n","import { authn as authnProto } from '@xmtp/proto'\nimport Long from 'long'\nimport { dateToNs } from '../utils/date'\n\nexport default class AuthData implements authnProto.AuthData {\n  walletAddr: string\n  createdNs: Long\n\n  public constructor({ walletAddr, createdNs }: authnProto.AuthData) {\n    this.walletAddr = walletAddr\n    this.createdNs = createdNs\n  }\n\n  static create(walletAddr: string, timestamp?: Date): AuthData {\n    timestamp = timestamp || new Date()\n    return new AuthData({\n      walletAddr,\n      createdNs: dateToNs(timestamp),\n    })\n  }\n\n  static fromBytes(bytes: Uint8Array): AuthData {\n    const res = authnProto.AuthData.decode(bytes)\n    return new AuthData(res)\n  }\n\n  toBytes(): Uint8Array {\n    return authnProto.AuthData.encode(this).finish()\n  }\n}\n","import { authn, signature, publicKey } from '@xmtp/proto'\nimport AuthData from './AuthData'\n\nexport default class Token implements authn.Token {\n  identityKey: publicKey.PublicKey\n  authDataBytes: Uint8Array\n  authDataSignature: signature.Signature\n  private _authData?: AuthData\n\n  constructor({ identityKey, authDataBytes, authDataSignature }: authn.Token) {\n    if (!identityKey) {\n      throw new Error('Missing identity key in token')\n    }\n    if (!authDataSignature) {\n      throw new Error('Missing authDataSignature in token')\n    }\n    this.identityKey = identityKey\n    this.authDataBytes = authDataBytes\n    this.authDataSignature = authDataSignature\n  }\n\n  // Get AuthData, generating from bytes and cacheing the first time it is accessed\n  get authData(): AuthData {\n    if (!this._authData) {\n      this._authData = AuthData.fromBytes(this.authDataBytes)\n    }\n\n    return this._authData\n  }\n\n  get ageMs(): number {\n    const now = new Date().valueOf()\n    const authData = this.authData\n    const createdAt = authData.createdNs.div(1_000_000).toNumber()\n    return now - createdAt\n  }\n\n  toBytes(): Uint8Array {\n    return authn.Token.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): Token {\n    return new Token(authn.Token.decode(bytes))\n  }\n\n  toBase64(): string {\n    return Buffer.from(this.toBytes()).toString('base64')\n  }\n}\n","import { authn } from '@xmtp/proto'\nimport { Keystore } from '../keystore'\nimport { dateToNs } from '../utils'\nimport Token from './Token'\n\nconst wrapToken = (token: authn.Token): Token => {\n  if (token instanceof Token) {\n    return token\n  }\n  return new Token(token)\n}\n\nexport default class KeystoreAuthenticator {\n  private keystore: Keystore\n\n  constructor(keystore: Keystore) {\n    this.keystore = keystore\n  }\n\n  async createToken(timestamp?: Date): Promise<Token> {\n    const token = await this.keystore.createAuthToken({\n      timestampNs: timestamp ? dateToNs(timestamp) : undefined,\n    })\n\n    return wrapToken(token)\n  }\n}\n","import BackupClient, { BackupType, NoBackupConfiguration } from './BackupClient'\n\nconst BACKUP_TYPE = BackupType.none\nexport default class NoBackupClient implements BackupClient {\n  private configuration: NoBackupConfiguration\n\n  public static createConfiguration(): NoBackupConfiguration {\n    return {\n      type: BACKUP_TYPE,\n      version: 0,\n    }\n  }\n\n  constructor(configuration: NoBackupConfiguration) {\n    this.configuration = configuration\n  }\n\n  public get backupType(): BackupType {\n    return BACKUP_TYPE\n  }\n}\n","import BackupClient, {\n  BackupType,\n  TopicStoreBackupConfiguration,\n} from './BackupClient'\n\nconst BACKUP_TYPE = BackupType.xmtpTopicStore\nexport default class TopicStoreBackupClient implements BackupClient {\n  private configuration: TopicStoreBackupConfiguration\n\n  public static createConfiguration(\n    walletAddress: string\n  ): TopicStoreBackupConfiguration {\n    // TODO: randomly generate topic and encryption key\n    return {\n      type: BACKUP_TYPE,\n      version: 0,\n      topic: 'history-v0:' + walletAddress,\n    }\n  }\n\n  constructor(configuration: TopicStoreBackupConfiguration) {\n    this.configuration = configuration\n  }\n\n  public get backupType(): BackupType {\n    return BACKUP_TYPE\n  }\n}\n","import BackupClient, {\n  BackupConfiguration,\n  BackupType,\n  SelectBackupProvider,\n} from './BackupClient'\nimport NoBackupClient from './NoBackupClient'\nimport TopicStoreBackupClient from './TopicStoreBackupClient'\n\n/**\n * Creates a backup client of the correct provider type (e.g. xmtp backup, no backup, etc).\n * Uses an existing user preference from the backend if it exists, else prompts for a new\n * one using the `providerSelector`\n *\n * @param walletAddress The public address of the user's wallet\n * @param selectBackupProvider A callback for determining the provider to use, in the event there is no\n * existing user preference. The app can define the policy to use here (e.g. prompt the user,\n * or default to a certain provider type).\n * @returns A backup client of the correct type\n */\nexport async function createBackupClient(\n  walletAddress: string,\n  selectBackupProvider: SelectBackupProvider\n): Promise<BackupClient> {\n  const configuration = await fetchOrCreateConfiguration(\n    walletAddress,\n    selectBackupProvider\n  )\n  switch (configuration.type) {\n    case BackupType.none:\n      return new NoBackupClient(configuration)\n    case BackupType.xmtpTopicStore:\n      return new TopicStoreBackupClient(configuration)\n  }\n}\n\nexport async function fetchOrCreateConfiguration(\n  walletAddress: string,\n  selectBackupProvider: SelectBackupProvider\n): Promise<BackupConfiguration> {\n  // TODO: return existing configuration from the backend if it exists\n  let backupConfiguration: BackupConfiguration\n  const provider = await selectBackupProvider()\n  switch (provider.type) {\n    case BackupType.none:\n      backupConfiguration = NoBackupClient.createConfiguration()\n      break\n    case BackupType.xmtpTopicStore:\n      backupConfiguration =\n        TopicStoreBackupClient.createConfiguration(walletAddress)\n      break\n  }\n  // TODO: Persist new configuration to backend\n  return backupConfiguration\n}\n","export class KeystoreProviderUnavailableError extends Error {}\n","import {\n  authn,\n  keystore,\n  privateKey,\n  signature,\n  conversationReference,\n} from '@xmtp/proto'\nimport {\n  PrivateKeyBundleV1,\n  PrivateKeyBundleV2,\n} from './../crypto/PrivateKeyBundle'\nimport { InvitationV1, SealedInvitation } from './../Invitation'\nimport { PrivateKey, PublicKeyBundle } from '../crypto'\nimport { Keystore, TopicData } from './interfaces'\nimport { decryptV1, encryptV1, encryptV2, decryptV2 } from './encryption'\nimport { KeystoreError } from './errors'\nimport {\n  convertError,\n  mapAndConvertErrors,\n  toPublicKeyBundle,\n  toSignedPublicKeyBundle,\n  validateObject,\n  getKeyMaterial,\n  topicDataToConversationReference,\n} from './utils'\nimport { nsToDate, buildDirectMessageTopicV2 } from '../utils'\nimport InviteStore from './InviteStore'\nimport { Persistence } from './persistence'\nimport LocalAuthenticator from '../authn/LocalAuthenticator'\nimport { hmacSha256Sign } from '../crypto/ecies'\nimport crypto from '../crypto/crypto'\nimport { bytesToHex } from '../crypto/utils'\nconst { ErrorCode } = keystore\n\n// Constant, 32 byte salt\n// DO NOT CHANGE\nconst INVITE_SALT = new TextEncoder().encode('__XMTP__INVITATION__SALT__XMTP__')\n\nasync function deriveKey(\n  secret: Uint8Array,\n  info: Uint8Array\n): Promise<CryptoKey> {\n  const key = await crypto.subtle.importKey('raw', secret, 'HKDF', false, [\n    'deriveKey',\n  ])\n  return crypto.subtle.deriveKey(\n    { name: 'HKDF', hash: 'SHA-256', salt: INVITE_SALT, info },\n    key,\n    { name: 'AES-GCM', length: 256 },\n    true,\n    ['encrypt', 'decrypt']\n  )\n}\n\nexport default class InMemoryKeystore implements Keystore {\n  private v1Keys: PrivateKeyBundleV1\n  private v2Keys: PrivateKeyBundleV2 // Do I need this?\n  private inviteStore: InviteStore\n  private authenticator: LocalAuthenticator\n  private accountAddress: string | undefined\n\n  constructor(keys: PrivateKeyBundleV1, inviteStore: InviteStore) {\n    this.v1Keys = keys\n    this.v2Keys = PrivateKeyBundleV2.fromLegacyBundle(keys)\n    this.inviteStore = inviteStore\n    this.authenticator = new LocalAuthenticator(keys.identityKey)\n  }\n\n  static async create(keys: PrivateKeyBundleV1, persistence?: Persistence) {\n    return new InMemoryKeystore(keys, await InviteStore.create(persistence))\n  }\n\n  async decryptV1(\n    req: keystore.DecryptV1Request\n  ): Promise<keystore.DecryptResponse> {\n    const responses = await mapAndConvertErrors(\n      req.requests,\n      async (req) => {\n        if (!validateObject(req, ['payload', 'peerKeys'], ['headerBytes'])) {\n          throw new KeystoreError(ErrorCode.ERROR_CODE_INVALID_INPUT, 'invalid')\n        }\n        const { payload, peerKeys, headerBytes, isSender } = req\n\n        const decrypted = await decryptV1(\n          this.v1Keys,\n          toPublicKeyBundle(peerKeys),\n          payload,\n          headerBytes,\n          isSender\n        )\n\n        return {\n          decrypted,\n        }\n      },\n      keystore.ErrorCode.ERROR_CODE_UNSPECIFIED\n    )\n\n    return keystore.DecryptResponse.fromPartial({\n      responses,\n    })\n  }\n\n  async decryptV2(\n    req: keystore.DecryptV2Request\n  ): Promise<keystore.DecryptResponse> {\n    const responses = await mapAndConvertErrors(\n      req.requests,\n      async (req) => {\n        if (!validateObject(req, ['payload'], ['headerBytes'])) {\n          throw new KeystoreError(\n            keystore.ErrorCode.ERROR_CODE_INVALID_INPUT,\n            'missing required field'\n          )\n        }\n\n        const { payload, headerBytes, contentTopic } = req\n        const topicData = this.inviteStore.lookup(contentTopic)\n        if (!topicData) {\n          // This is the wrong error type. Will add to the proto repo later\n          throw new KeystoreError(\n            keystore.ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY,\n            'no topic key'\n          )\n        }\n        const decrypted = await decryptV2(\n          payload,\n          getKeyMaterial(topicData.invitation),\n          headerBytes\n        )\n\n        return { decrypted }\n      },\n      ErrorCode.ERROR_CODE_UNSPECIFIED\n    )\n\n    return keystore.DecryptResponse.fromPartial({\n      responses,\n    })\n  }\n\n  async encryptV1(\n    req: keystore.EncryptV1Request\n  ): Promise<keystore.EncryptResponse> {\n    const responses = await mapAndConvertErrors(\n      req.requests,\n      async (req) => {\n        if (!validateObject(req, ['payload', 'recipient'], ['headerBytes'])) {\n          throw new KeystoreError(\n            ErrorCode.ERROR_CODE_INVALID_INPUT,\n            'missing required field'\n          )\n        }\n\n        const { recipient, payload, headerBytes } = req\n\n        return {\n          encrypted: await encryptV1(\n            this.v1Keys,\n            toPublicKeyBundle(recipient),\n            payload,\n            headerBytes\n          ),\n        }\n      },\n      ErrorCode.ERROR_CODE_UNSPECIFIED\n    )\n\n    return keystore.EncryptResponse.fromPartial({\n      responses,\n    })\n  }\n\n  async createAuthToken({\n    timestampNs,\n  }: keystore.CreateAuthTokenRequest): Promise<authn.Token> {\n    return this.authenticator.createToken(\n      timestampNs ? nsToDate(timestampNs) : undefined\n    )\n  }\n\n  async encryptV2(\n    req: keystore.EncryptV2Request\n  ): Promise<keystore.EncryptResponse> {\n    const responses = await mapAndConvertErrors(\n      req.requests,\n      async (req) => {\n        if (!validateObject(req, ['payload'], ['headerBytes'])) {\n          throw new KeystoreError(\n            ErrorCode.ERROR_CODE_INVALID_INPUT,\n            'missing required field'\n          )\n        }\n\n        const { payload, headerBytes, contentTopic } = req\n\n        const topicData = this.inviteStore.lookup(contentTopic)\n        if (!topicData) {\n          throw new KeystoreError(\n            ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY,\n            'no topic key'\n          )\n        }\n\n        return {\n          encrypted: await encryptV2(\n            payload,\n            getKeyMaterial(topicData.invitation),\n            headerBytes\n          ),\n        }\n      },\n      ErrorCode.ERROR_CODE_INVALID_INPUT\n    )\n\n    return keystore.EncryptResponse.fromPartial({\n      responses,\n    })\n  }\n\n  async saveInvites(\n    req: keystore.SaveInvitesRequest\n  ): Promise<keystore.SaveInvitesResponse> {\n    const toAdd: TopicData[] = []\n\n    const responses = await mapAndConvertErrors(\n      req.requests,\n      async ({ payload, timestampNs }) => {\n        const sealed = SealedInvitation.fromBytes(payload)\n        if (sealed.v1) {\n          const headerTime = sealed.v1.header.createdNs\n          if (!headerTime.equals(timestampNs)) {\n            throw new Error('envelope and header timestamp mismatch')\n          }\n\n          const isSender = sealed.v1.header.sender.equals(\n            this.v2Keys.getPublicKeyBundle()\n          )\n\n          const invitation = await sealed.v1.getInvitation(this.v2Keys)\n          const topicData = {\n            invitation,\n            createdNs: sealed.v1.header.createdNs,\n            peerAddress: isSender\n              ? await sealed.v1.header.recipient.walletSignatureAddress()\n              : await sealed.v1.header.sender.walletSignatureAddress(),\n          }\n          toAdd.push(topicData)\n          return {\n            conversation: topicDataToConversationReference(topicData),\n          }\n        }\n      },\n      ErrorCode.ERROR_CODE_INVALID_INPUT\n    )\n\n    await this.inviteStore.add(toAdd)\n\n    return keystore.SaveInvitesResponse.fromPartial({\n      responses,\n    })\n  }\n\n  async createInvite(\n    req: keystore.CreateInviteRequest\n  ): Promise<keystore.CreateInviteResponse> {\n    try {\n      if (!validateObject(req, ['recipient'], [])) {\n        throw new KeystoreError(\n          ErrorCode.ERROR_CODE_INVALID_INPUT,\n          'missing recipient'\n        )\n      }\n      const created = nsToDate(req.createdNs)\n      const recipient = toSignedPublicKeyBundle(req.recipient)\n\n      const secret = await this.v2Keys.sharedSecret(\n        recipient,\n        this.v2Keys.getCurrentPreKey().publicKey,\n        false\n      )\n\n      const sortedAddresses = [\n        this.accountAddress,\n        await recipient.walletSignatureAddress(),\n      ].sort()\n\n      const msgString =\n        (req.context?.conversationId || '') + sortedAddresses.join()\n\n      const msgBytes = new TextEncoder().encode(msgString)\n\n      const topic = bytesToHex(\n        await hmacSha256Sign(Buffer.from(secret), Buffer.from(msgBytes))\n      )\n\n      const infoString = [\n        '0', // sequence number\n        ...sortedAddresses,\n      ].join('|')\n      const info = new TextEncoder().encode(infoString)\n      const derivedKey = await deriveKey(secret, info)\n\n      const keyMaterial = new Uint8Array(\n        await crypto.subtle.exportKey('raw', derivedKey)\n      )\n\n      const invitation = new InvitationV1({\n        topic: buildDirectMessageTopicV2(topic),\n        aes256GcmHkdfSha256: { keyMaterial },\n        context: req.context,\n      })\n\n      const sealed = await SealedInvitation.createV1({\n        sender: this.v2Keys,\n        recipient,\n        created,\n        invitation,\n      })\n      const topicData = {\n        invitation,\n        createdNs: req.createdNs,\n        peerAddress: await recipient.walletSignatureAddress(),\n      }\n      await this.inviteStore.add([topicData])\n\n      return keystore.CreateInviteResponse.fromPartial({\n        conversation: topicDataToConversationReference(topicData),\n        payload: sealed.toBytes(),\n      })\n    } catch (e) {\n      throw convertError(e as Error, ErrorCode.ERROR_CODE_INVALID_INPUT)\n    }\n  }\n\n  async signDigest(\n    req: keystore.SignDigestRequest\n  ): Promise<signature.Signature> {\n    if (!validateObject(req, ['digest'], [])) {\n      throw new KeystoreError(\n        ErrorCode.ERROR_CODE_INVALID_INPUT,\n        'missing required field'\n      )\n    }\n\n    const { digest, identityKey, prekeyIndex } = req\n    let key: PrivateKey\n    if (identityKey) {\n      key = this.v1Keys.identityKey\n    } else if (\n      typeof prekeyIndex !== 'undefined' &&\n      Number.isInteger(prekeyIndex)\n    ) {\n      key = this.v1Keys.preKeys[prekeyIndex]\n      if (!key) {\n        throw new KeystoreError(\n          ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY,\n          'no prekey found'\n        )\n      }\n    } else {\n      throw new KeystoreError(\n        ErrorCode.ERROR_CODE_INVALID_INPUT,\n        'must specifify identityKey or prekeyIndex'\n      )\n    }\n\n    return key.sign(digest)\n  }\n\n  async getV2Conversations(): Promise<\n    conversationReference.ConversationReference[]\n  > {\n    const convos = this.inviteStore.topics.map((invite) =>\n      topicDataToConversationReference(invite)\n    )\n\n    convos.sort((a, b) =>\n      a.createdNs.div(1_000_000).sub(b.createdNs.div(1_000_000)).toNumber()\n    )\n    return convos\n  }\n\n  async getPublicKeyBundle(): Promise<PublicKeyBundle> {\n    return this.v1Keys.getPublicKeyBundle()\n  }\n\n  async getPrivateKeyBundle(): Promise<privateKey.PrivateKeyBundleV1> {\n    return this.v1Keys\n  }\n\n  async getAccountAddress(): Promise<string> {\n    if (!this.accountAddress) {\n      this.accountAddress = await this.v2Keys\n        .getPublicKeyBundle()\n        .walletSignatureAddress()\n    }\n    return this.accountAddress\n  }\n\n  // This method is not defined as part of the standard Keystore API, but is available\n  // on the InMemoryKeystore to support legacy use-cases.\n  lookupTopic(topic: string) {\n    return this.inviteStore.lookup(topic)\n  }\n}\n","import Long from 'long'\nimport { SignedPublicKeyBundle } from './crypto/PublicKeyBundle'\nimport { messageApi, invitation, fetcher } from '@xmtp/proto'\nimport crypto from './crypto/crypto'\nimport Ciphertext from './crypto/Ciphertext'\nimport { decrypt, encrypt } from './crypto'\nimport { PrivateKeyBundleV2 } from './crypto/PrivateKeyBundle'\nimport { dateToNs, buildDirectMessageTopicV2 } from './utils'\nconst { b64Decode } = fetcher\n\nexport type InvitationContext = {\n  conversationId: string\n  metadata: { [k: string]: string }\n}\n\n/**\n * InvitationV1 is a protobuf message to be encrypted and used as the ciphertext in a SealedInvitationV1 message\n */\nexport class InvitationV1 implements invitation.InvitationV1 {\n  topic: string\n  context: InvitationContext | undefined\n  aes256GcmHkdfSha256: invitation.InvitationV1_Aes256gcmHkdfsha256 // eslint-disable-line camelcase\n\n  constructor({\n    topic,\n    context,\n    aes256GcmHkdfSha256,\n  }: invitation.InvitationV1) {\n    if (!topic || !topic.length) {\n      throw new Error('Missing topic')\n    }\n    if (\n      !aes256GcmHkdfSha256 ||\n      !aes256GcmHkdfSha256.keyMaterial ||\n      !aes256GcmHkdfSha256.keyMaterial.length\n    ) {\n      throw new Error('Missing key material')\n    }\n    this.topic = topic\n    this.context = context\n    this.aes256GcmHkdfSha256 = aes256GcmHkdfSha256\n  }\n\n  static createRandom(context?: invitation.InvitationV1_Context): InvitationV1 {\n    const topic = buildDirectMessageTopicV2(\n      Buffer.from(crypto.getRandomValues(new Uint8Array(32)))\n        .toString('base64')\n        .replace(/=*$/g, '')\n        // Replace slashes with dashes so that the topic is still easily split by /\n        // We do not treat this as needing to be valid Base64 anywhere\n        .replace('/', '-')\n    )\n    const keyMaterial = crypto.getRandomValues(new Uint8Array(32))\n\n    return new InvitationV1({\n      topic,\n      aes256GcmHkdfSha256: { keyMaterial },\n      context,\n    })\n  }\n\n  toBytes(): Uint8Array {\n    return invitation.InvitationV1.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): InvitationV1 {\n    return new InvitationV1(invitation.InvitationV1.decode(bytes))\n  }\n}\n\n/**\n * SealedInvitationHeaderV1 is a protobuf message to be used as the headerBytes in a SealedInvitationV1\n */\nexport class SealedInvitationHeaderV1\n  implements invitation.SealedInvitationHeaderV1\n{\n  sender: SignedPublicKeyBundle\n  recipient: SignedPublicKeyBundle\n  createdNs: Long\n\n  constructor({\n    sender,\n    recipient,\n    createdNs,\n  }: invitation.SealedInvitationHeaderV1) {\n    if (!sender) {\n      throw new Error('Missing sender')\n    }\n    if (!recipient) {\n      throw new Error('Missing recipient')\n    }\n    this.sender = new SignedPublicKeyBundle(sender)\n    this.recipient = new SignedPublicKeyBundle(recipient)\n    this.createdNs = createdNs\n  }\n\n  toBytes(): Uint8Array {\n    return invitation.SealedInvitationHeaderV1.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): SealedInvitationHeaderV1 {\n    return new SealedInvitationHeaderV1(\n      invitation.SealedInvitationHeaderV1.decode(bytes)\n    )\n  }\n}\n\nexport class SealedInvitationV1 implements invitation.SealedInvitationV1 {\n  headerBytes: Uint8Array\n  ciphertext: Ciphertext\n  private _header?: SealedInvitationHeaderV1\n  private _invitation?: InvitationV1\n\n  constructor({ headerBytes, ciphertext }: invitation.SealedInvitationV1) {\n    if (!headerBytes || !headerBytes.length) {\n      throw new Error('Missing header bytes')\n    }\n    if (!ciphertext) {\n      throw new Error('Missing ciphertext')\n    }\n    this.headerBytes = headerBytes\n    this.ciphertext = new Ciphertext(ciphertext)\n  }\n\n  /**\n   * Accessor method for the full header object\n   */\n  get header(): SealedInvitationHeaderV1 {\n    // Use cached value if already exists\n    if (this._header) {\n      return this._header\n    }\n    this._header = SealedInvitationHeaderV1.fromBytes(this.headerBytes)\n    return this._header\n  }\n\n  /**\n   * getInvitation decrypts and returns the InvitationV1 stored in the ciphertext of the Sealed Invitation\n   */\n  async getInvitation(viewer: PrivateKeyBundleV2): Promise<InvitationV1> {\n    // Use cached value if already exists\n    if (this._invitation) {\n      return this._invitation\n    }\n    // The constructors for child classes will validate that this is complete\n    const header = this.header\n    let secret: Uint8Array\n    if (viewer.identityKey.matches(this.header.sender.identityKey)) {\n      secret = await viewer.sharedSecret(\n        header.recipient,\n        header.sender.preKey,\n        false\n      )\n    } else {\n      secret = await viewer.sharedSecret(\n        header.sender,\n        header.recipient.preKey,\n        true\n      )\n    }\n\n    const decryptedBytes = await decrypt(\n      this.ciphertext,\n      secret,\n      this.headerBytes\n    )\n    this._invitation = InvitationV1.fromBytes(decryptedBytes)\n    return this._invitation\n  }\n\n  toBytes(): Uint8Array {\n    return invitation.SealedInvitationV1.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): SealedInvitationV1 {\n    return new SealedInvitationV1(invitation.SealedInvitationV1.decode(bytes))\n  }\n}\n\n/**\n * Wrapper class for SealedInvitationV1 and any future iterations of SealedInvitation\n */\nexport class SealedInvitation implements invitation.SealedInvitation {\n  v1: SealedInvitationV1 | undefined\n\n  constructor({ v1 }: invitation.SealedInvitation) {\n    if (v1) {\n      this.v1 = new SealedInvitationV1(v1)\n    } else {\n      throw new Error('Missing v1 or v2 invitation')\n    }\n  }\n\n  toBytes(): Uint8Array {\n    return invitation.SealedInvitation.encode(this).finish()\n  }\n\n  static fromBytes(bytes: Uint8Array): SealedInvitation {\n    return new SealedInvitation(invitation.SealedInvitation.decode(bytes))\n  }\n\n  static async fromEnvelope(\n    env: messageApi.Envelope\n  ): Promise<SealedInvitation> {\n    if (!env.message || !env.timestampNs) {\n      throw new Error('invalid invitation envelope')\n    }\n    const sealed = SealedInvitation.fromBytes(\n      b64Decode(env.message as unknown as string)\n    )\n    const envelopeTime = Long.fromString(env.timestampNs)\n    const headerTime = sealed.v1?.header.createdNs\n    if (!headerTime || !headerTime.equals(envelopeTime)) {\n      throw new Error('envelope and header timestamp mistmatch')\n    }\n    return sealed\n  }\n\n  /**\n   * Create a SealedInvitation with a SealedInvitationV1 payload\n   * Will encrypt all contents and validate inputs\n   */\n  static async createV1({\n    sender,\n    recipient,\n    created,\n    invitation,\n  }: {\n    sender: PrivateKeyBundleV2\n    recipient: SignedPublicKeyBundle\n    created: Date\n    invitation: InvitationV1\n  }): Promise<SealedInvitation> {\n    const headerBytes = new SealedInvitationHeaderV1({\n      sender: sender.getPublicKeyBundle(),\n      recipient,\n      createdNs: dateToNs(created),\n    }).toBytes()\n\n    const secret = await sender.sharedSecret(\n      recipient,\n      sender.getCurrentPreKey().publicKey,\n      false\n    )\n\n    const invitationBytes = invitation.toBytes()\n    const ciphertext = await encrypt(invitationBytes, secret, headerBytes)\n\n    return new SealedInvitation({\n      v1: { headerBytes, ciphertext },\n    })\n  }\n}\n","import {\n  PublicKeyBundle,\n  encrypt,\n  PrivateKeyBundleV1,\n  decrypt,\n} from '../crypto'\nimport { ciphertext } from '@xmtp/proto'\n\nexport const decryptV1 = async (\n  myKeys: PrivateKeyBundleV1,\n  peerKeys: PublicKeyBundle,\n  ciphertext: ciphertext.Ciphertext,\n  headerBytes: Uint8Array,\n  isSender: boolean\n): Promise<Uint8Array> => {\n  const secret = await myKeys.sharedSecret(\n    peerKeys,\n    myKeys.getCurrentPreKey().publicKey, // assumes that the current preKey is what was used to encrypt\n    !isSender\n  )\n\n  return decrypt(ciphertext, secret, headerBytes)\n}\n\nexport const encryptV1 = async (\n  keys: PrivateKeyBundleV1,\n  recipient: PublicKeyBundle,\n  message: Uint8Array,\n  headerBytes: Uint8Array\n): Promise<ciphertext.Ciphertext> => {\n  const secret = await keys.sharedSecret(\n    recipient,\n    keys.getCurrentPreKey().publicKey,\n    false // assumes that the sender is the party doing the encrypting\n  )\n\n  return encrypt(message, secret, headerBytes)\n}\n\nexport const decryptV2 = (\n  ciphertext: ciphertext.Ciphertext,\n  secret: Uint8Array,\n  headerBytes: Uint8Array\n) => decrypt(ciphertext, secret, headerBytes)\n\nexport const encryptV2 = (\n  payload: Uint8Array,\n  secret: Uint8Array,\n  headerBytes: Uint8Array\n) => encrypt(payload, secret, headerBytes)\n","import { TopicData } from './interfaces'\nimport {\n  conversationReference,\n  publicKey,\n  keystore,\n  invitation,\n} from '@xmtp/proto'\nimport { PublicKeyBundle, SignedPublicKeyBundle } from '../crypto'\nimport { KeystoreError } from './errors'\nimport { WithoutUndefined } from '../utils/typedefs'\n\nexport const convertError = (\n  e: Error,\n  // Default error code to apply to errors that don't have one\n  errorCode: keystore.ErrorCode\n) => {\n  if (e instanceof KeystoreError) {\n    return e\n  }\n\n  return new KeystoreError(errorCode, e.message)\n}\n\nexport const wrapResult = <T>(result: T): { result: T } => ({ result })\n\ntype ResultOrError<T> = { result: T } | { error: KeystoreError }\n\n// Map an array of items to an array of results or errors\n// Transform any errors thrown into `KeystoreError`s\nexport const mapAndConvertErrors = <Input, Output>(\n  input: Input[],\n  mapper: (input: Input) => Promise<Output> | Output,\n  // Default error code to apply to errors that don't have one\n  errorCode: keystore.ErrorCode\n): Promise<ResultOrError<Output>[]> => {\n  return Promise.all(\n    input.map(async (item: Input) => {\n      try {\n        // Be sure to await mapper result to catch errors\n        return wrapResult(await mapper(item))\n      } catch (e) {\n        return { error: convertError(e as Error, errorCode) }\n      }\n    })\n  )\n}\n\n// Wrap the bundle in our class if not already wrapped\nexport const toPublicKeyBundle = (bundle: publicKey.PublicKeyBundle) => {\n  if (bundle instanceof PublicKeyBundle) {\n    return bundle\n  }\n\n  return new PublicKeyBundle(bundle)\n}\n\n// Wrap the bundle in our class if not already wrapped\nexport const toSignedPublicKeyBundle = (\n  bundle: publicKey.SignedPublicKeyBundle\n) => {\n  if (bundle instanceof SignedPublicKeyBundle) {\n    return bundle\n  }\n\n  return new SignedPublicKeyBundle(bundle)\n}\n\n// Takes object and returns true if none of the `objectFields` are null or undefined and none of the `arrayFields` are empty\nexport const validateObject = <T>(\n  obj: T,\n  objectFields: (keyof T)[],\n  arrayFields: (keyof T)[]\n): obj is WithoutUndefined<T> => {\n  for (const field of objectFields) {\n    if (!obj[field]) {\n      throw new KeystoreError(\n        keystore.ErrorCode.ERROR_CODE_INVALID_INPUT,\n        `Missing field ${String(field)}`\n      )\n    }\n  }\n  for (const field of arrayFields) {\n    const val = obj[field]\n    // @ts-expect-error does not know it's an array\n    if (!val || !val?.length) {\n      throw new KeystoreError(\n        keystore.ErrorCode.ERROR_CODE_INVALID_INPUT,\n        `Missing field ${String(field)}`\n      )\n    }\n  }\n\n  return true\n}\n\nexport const getKeyMaterial = (\n  invite: invitation.InvitationV1 | undefined\n): Uint8Array => {\n  if (!invite?.aes256GcmHkdfSha256?.keyMaterial) {\n    throw new KeystoreError(\n      keystore.ErrorCode.ERROR_CODE_INVALID_INPUT,\n      'Missing key material'\n    )\n  }\n  return invite.aes256GcmHkdfSha256.keyMaterial\n}\n\nexport const topicDataToConversationReference = ({\n  invitation,\n  createdNs,\n  peerAddress,\n}: TopicData): conversationReference.ConversationReference => ({\n  context: invitation.context,\n  topic: invitation.topic,\n  peerAddress,\n  createdNs,\n})\n\nexport const isCompleteTopicData = (\n  obj: keystore.TopicMap_TopicData\n): obj is TopicData => !!obj.invitation\n\nexport const typeSafeTopicMap = (\n  topicMap: keystore.TopicMap\n): { [k: string]: TopicData } => {\n  const out: { [k: string]: TopicData } = {}\n  for (const [topic, topicData] of Object.entries(topicMap.topics)) {\n    if (isCompleteTopicData(topicData)) {\n      out[topic] = topicData\n    } else {\n      // This should only happen if bad data somehow snuck through validation\n      console.warn('Invitation missing from topic data')\n    }\n  }\n  return out\n}\n","import { keystore } from '@xmtp/proto'\nimport { Persistence } from './persistence/interface'\nimport type { TopicData } from './interfaces'\nimport { Mutex } from 'async-mutex'\nimport { typeSafeTopicMap } from './utils'\n\nconst INVITE_KEY = 'invitations/v1'\n\n/**\n * InviteStore holds a simple map of topic -> TopicData and writes to the persistence layer on changes\n */\nexport default class InviteStore {\n  private persistence?: Persistence\n  private mutex: Mutex\n  private topicMap: Map<string, TopicData>\n\n  constructor(\n    persistence?: Persistence,\n    initialData: Map<string, TopicData> = new Map()\n  ) {\n    this.persistence = persistence\n    this.mutex = new Mutex()\n    this.topicMap = initialData\n  }\n\n  static async create(persistence?: Persistence): Promise<InviteStore> {\n    if (persistence) {\n      const rawData = await persistence.getItem(INVITE_KEY)\n      if (rawData) {\n        try {\n          const inviteMap = typeSafeTopicMap(keystore.TopicMap.decode(rawData))\n          // Create an InviteStore with data preloaded\n          return new InviteStore(\n            persistence,\n            new Map(Object.entries(inviteMap))\n          )\n        } catch (e) {\n          console.warn(`Error loading invites from store: ${e}`)\n        }\n      }\n    }\n    return new InviteStore(persistence)\n  }\n\n  async add(topicData: TopicData[]): Promise<void> {\n    await this.mutex.runExclusive(async () => {\n      let isDirty = false\n      for (const row of topicData) {\n        // This will not overwrite any existing values. First invite found in the store for a given topic will always be used\n        // Duplicates do not throw errors\n        if (!this.topicMap.has(row.invitation.topic)) {\n          this.topicMap.set(row.invitation.topic, row)\n          isDirty = true\n        }\n      }\n      // Only write to persistence once, and only if we have added new invites\n      if (isDirty && this.persistence) {\n        await this.persistence.setItem(INVITE_KEY, this.toBytes())\n      }\n    })\n  }\n\n  get topics(): TopicData[] {\n    return [...this.topicMap.values()]\n  }\n\n  lookup(topic: string): TopicData | undefined {\n    return this.topicMap.get(topic)\n  }\n\n  private toBytes(): Uint8Array {\n    return keystore.TopicMap.encode({\n      topics: Object.fromEntries(this.topicMap),\n    }).finish()\n  }\n}\n","// This file is taken from `bitchan/eccrypto` and ported to TS. All references to `nodeCrypto` have been replaced with `browserCrypto`\n/**\n * `elliptic` is a CommonJS module and has issues with named imports\n * DO NOT CHANGE THIS TO A NAMED IMPORT\n */\nimport elliptic from 'elliptic'\nimport crypto from './crypto'\nconst EC = elliptic.ec\nconst ec = new EC('secp256k1')\n\nconst subtle = crypto.subtle\n\nconst EC_GROUP_ORDER = Buffer.from(\n  'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',\n  'hex'\n)\nconst ZERO32 = Buffer.alloc(32, 0)\n\nexport type Ecies = {\n  iv: Buffer\n  ephemeralPublicKey: Buffer\n  ciphertext: Buffer\n  mac: Buffer\n}\n\nfunction assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed')\n  }\n}\n\nfunction isScalar(x: unknown) {\n  return Buffer.isBuffer(x) && x.length === 32\n}\n\nfunction isValidPrivateKey(privateKey: Buffer) {\n  if (!isScalar(privateKey)) {\n    return false\n  }\n  return (\n    privateKey.compare(ZERO32) > 0 && // > 0\n    privateKey.compare(EC_GROUP_ORDER) < 0\n  ) // < G\n}\n\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1: Buffer, b2: Buffer) {\n  if (b1.length !== b2.length) {\n    return false\n  }\n  let res = 0\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i] // jshint ignore:line\n  }\n  return res === 0\n}\n\nfunction randomBytes(size: number): Buffer {\n  const arr = new Uint8Array(size)\n  crypto.getRandomValues(arr)\n  return Buffer.from(arr)\n}\n\nasync function sha512(msg: Buffer) {\n  const digest = await subtle.digest('SHA-512', msg)\n  return Buffer.from(digest)\n}\n\nfunction getAes(\n  op: 'encrypt' | 'decrypt'\n): (iv: Buffer, key: Buffer, data: Buffer) => Promise<Buffer> {\n  return function (iv: Buffer, key: Uint8Array, data: Uint8Array) {\n    return new Promise(function (resolve) {\n      const importAlgorithm = { name: 'AES-CBC' }\n      const keyp = subtle.importKey('raw', key, importAlgorithm, false, [op])\n      return keyp\n        .then(function (cryptoKey) {\n          const encAlgorithm = { name: 'AES-CBC', iv }\n          return subtle[op](encAlgorithm, cryptoKey, data)\n        })\n        .then(function (result) {\n          resolve(Buffer.from(new Uint8Array(result)))\n        })\n    })\n  }\n}\n\nconst aesCbcEncrypt = getAes('encrypt')\nconst aesCbcDecrypt = getAes('decrypt')\n\nexport async function hmacSha256Sign(key: Buffer, msg: Buffer) {\n  const newKey = await subtle.importKey(\n    'raw',\n    key,\n    { name: 'HMAC', hash: { name: 'SHA-256' } },\n    false,\n    ['sign']\n  )\n\n  return Buffer.from(\n    await subtle.sign({ name: 'HMAC', hash: 'SHA-256' }, newKey, msg)\n  )\n}\n\nasync function hmacSha256Verify(key: Buffer, msg: Buffer, sig: Buffer) {\n  const expectedSig = await hmacSha256Sign(key, msg)\n  return equalConstTime(expectedSig, sig)\n}\n\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n *\n * @returns {Buffer} A 32-byte private key.\n * @function\n */\nexport function generatePrivate() {\n  let privateKey = randomBytes(32)\n  while (!isValidPrivateKey(privateKey)) {\n    privateKey = randomBytes(32)\n  }\n  return privateKey\n}\n\nexport function getPublic(privateKey: Buffer) {\n  // This function has sync API so we throw an error immediately.\n  assert(privateKey.length === 32, 'Bad private key')\n  assert(isValidPrivateKey(privateKey), 'Bad private key')\n  // XXX(Kagami): `elliptic.utils.encode` returns array for every\n  // encoding except `hex`.\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic('array'))\n}\n\n/**\n * Get compressed version of public key.\n */\nexport function getPublicCompressed(privateKey: Buffer) {\n  // jshint ignore:line\n  assert(privateKey.length === 32, 'Bad private key')\n  assert(isValidPrivateKey(privateKey), 'Bad private key')\n  // See https://github.com/wanderer/secp256k1-node/issues/46\n  const compressed = true\n  return Buffer.from(\n    ec.keyFromPrivate(privateKey).getPublic(compressed, 'array')\n  )\n}\n\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nexport function sign(privateKey: Buffer, msg: Buffer) {\n  return new Promise(function (resolve) {\n    assert(privateKey.length === 32, 'Bad private key')\n    assert(isValidPrivateKey(privateKey), 'Bad private key')\n    assert(msg.length > 0, 'Message should not be empty')\n    assert(msg.length <= 32, 'Message is too long')\n    resolve(Buffer.from(ec.sign(msg, privateKey, { canonical: true }).toDER()))\n  })\n}\n\nexport function verify(publicKey: Buffer, msg: Buffer, sig: Buffer) {\n  return new Promise(function (resolve, reject) {\n    assert(publicKey.length === 65 || publicKey.length === 33, 'Bad public key')\n    if (publicKey.length === 65) {\n      assert(publicKey[0] === 4, 'Bad public key')\n    }\n    if (publicKey.length === 33) {\n      assert(publicKey[0] === 2 || publicKey[0] === 3, 'Bad public key')\n    }\n    assert(msg.length > 0, 'Message should not be empty')\n    assert(msg.length <= 32, 'Message is too long')\n    if (ec.verify(msg, sig, publicKey)) {\n      resolve(null)\n    } else {\n      reject(new Error('Bad signature'))\n    }\n  })\n}\n\nexport function derive(\n  privateKeyA: Buffer,\n  publicKeyB: Buffer\n): Promise<Buffer> {\n  return new Promise(function (resolve) {\n    assert(Buffer.isBuffer(privateKeyA), 'Bad private key')\n    assert(Buffer.isBuffer(publicKeyB), 'Bad public key')\n    assert(privateKeyA.length === 32, 'Bad private key')\n    assert(isValidPrivateKey(privateKeyA), 'Bad private key')\n    assert(\n      publicKeyB.length === 65 || publicKeyB.length === 33,\n      'Bad public key'\n    )\n    if (publicKeyB.length === 65) {\n      assert(publicKeyB[0] === 4, 'Bad public key')\n    }\n    if (publicKeyB.length === 33) {\n      assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, 'Bad public key')\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA)\n    const keyB = ec.keyFromPublic(publicKeyB)\n    const Px = keyA.derive(keyB.getPublic()) // BN instance\n    resolve(Buffer.from(Px.toArray()))\n  })\n}\n\nexport async function encrypt(\n  publicKeyTo: Buffer,\n  msg: Buffer,\n  opts?: { ephemPrivateKey?: Buffer; iv?: Buffer } | undefined\n) {\n  opts = opts || {}\n  // Take IV from opts or generate randomly\n  const iv = opts?.iv || randomBytes(16)\n  let ephemPrivateKey = opts?.ephemPrivateKey || randomBytes(32)\n  // There is a very unlikely possibility that it is not a valid key\n  while (!isValidPrivateKey(ephemPrivateKey)) {\n    if (opts?.ephemPrivateKey) {\n      throw new Error('ephemPrivateKey is not valid')\n    }\n    ephemPrivateKey = randomBytes(32)\n  }\n  // Get the public key from the ephemeral private key\n  const ephemeralPublicKey = getPublic(ephemPrivateKey)\n\n  const hash = await sha512(await derive(ephemPrivateKey, publicKeyTo))\n  const encryptionKey = hash.slice(0, 32)\n  const macKey = hash.slice(32)\n  const ciphertext = await aesCbcEncrypt(iv, encryptionKey, msg)\n\n  // Get a MAC\n  const dataToMac = Buffer.concat([iv, ephemeralPublicKey, ciphertext])\n  const mac = await hmacSha256Sign(macKey, dataToMac)\n\n  // Return the payload\n  return {\n    iv,\n    ephemeralPublicKey,\n    ciphertext,\n    mac,\n  }\n}\n\nexport async function decrypt(privateKey: Buffer, opts: Ecies) {\n  const px = await derive(privateKey, opts.ephemeralPublicKey)\n  const hash = await sha512(px)\n  const encryptionKey = hash.slice(0, 32)\n  const macKey = hash.slice(32)\n  const dataToMac = Buffer.concat([\n    opts.iv,\n    opts.ephemeralPublicKey,\n    opts.ciphertext,\n  ])\n  assert(await hmacSha256Verify(macKey, dataToMac, opts.mac), 'Bad mac')\n\n  return aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext)\n}\n","import { messageApi } from '@xmtp/proto'\nimport ApiClient from '../../ApiClient'\nimport { Authenticator } from '../../authn'\nimport { b64Decode } from '../../utils/bytes'\nimport { buildUserPrivateStoreTopic } from '../../utils/topic'\nimport { Persistence } from './interface'\n\nexport default class TopicPersistence implements Persistence {\n  apiClient: ApiClient\n  constructor(apiClient: ApiClient) {\n    this.apiClient = apiClient\n  }\n\n  // Returns the first record in a topic if it is present.\n  async getItem(key: string): Promise<Uint8Array | null> {\n    for await (const env of this.apiClient.queryIterator(\n      { contentTopic: this.buildTopic(key) },\n      {\n        pageSize: 1,\n        direction: messageApi.SortDirection.SORT_DIRECTION_DESCENDING,\n      }\n    )) {\n      if (!env.message) continue\n      try {\n        const bytes = b64Decode(env.message.toString())\n        return Uint8Array.from(bytes)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    return null\n  }\n\n  async setItem(key: string, value: Uint8Array): Promise<void> {\n    const keys = Uint8Array.from(value)\n    await this.apiClient.publish([\n      {\n        contentTopic: this.buildTopic(key),\n        message: keys,\n      },\n    ])\n  }\n\n  setAuthenticator(authenticator: Authenticator): void {\n    this.apiClient.setAuthenticator(authenticator)\n  }\n\n  private buildTopic(key: string): string {\n    return buildUserPrivateStoreTopic(key)\n  }\n}\n","// Fully in-memory polyfill for the browser storage API.\n// Borrowed from https://github.com/MitchellCash/node-storage-polyfill but implemented as a ponyfill instead of a polyfill\n\nexport default class LocalStoragePonyfill implements Storage {\n  store: Map<string, string>\n  constructor() {\n    this.store = new Map()\n  }\n\n  get length(): number {\n    return this.store.size\n  }\n\n  clear(): void {\n    this.store = new Map()\n  }\n\n  getItem(key: string): string | null {\n    this.validateString(key)\n\n    if (this.store.has(key)) {\n      return String(this.store.get(key))\n    }\n\n    return null\n  }\n\n  key(index: number): string | null {\n    if (index === undefined) {\n      // This is the TypeError implemented in Chrome, Firefox throws \"Storage.key: At least 1\n      // argument required, but only 0 passed\".\n      throw new TypeError(\n        \"Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.\"\n      )\n    }\n\n    const keys = [...this.store.keys()]\n\n    if (index >= keys.length) {\n      return null\n    }\n\n    return keys[index]\n  }\n\n  removeItem(key: string): void {\n    this.validateString(key)\n    this.store.delete(key)\n  }\n\n  setItem(key: string, value: string): void {\n    this.validateString(key)\n    this.validateString(value)\n    this.store.set(String(key), String(value))\n  }\n\n  private validateString(val: string): void {\n    if (!(typeof val === 'string')) {\n      throw new TypeError('Key must be a string')\n    }\n  }\n}\n","import { Persistence } from './interface'\nimport LocalStoragePonyfill from './LocalStoragePonyfill'\n\nexport default class LocalStoragePersistence implements Persistence {\n  storage: Storage\n  constructor() {\n    this.storage =\n      typeof localStorage !== 'undefined'\n        ? localStorage\n        : new LocalStoragePonyfill()\n  }\n\n  async getItem(key: string): Promise<Uint8Array | null> {\n    const value = this.storage.getItem(key)\n    if (value === null) {\n      return null\n    }\n    return Uint8Array.from(Buffer.from(value, 'binary'))\n  }\n\n  async setItem(key: string, value: Uint8Array): Promise<void> {\n    this.storage.setItem(key, Buffer.from(value).toString('binary'))\n  }\n}\n","import { Persistence } from './interface'\n\nexport default class PrefixedPersistence {\n  prefix: string\n  persistence: Persistence\n\n  constructor(prefix: string, persistence: Persistence) {\n    this.prefix = prefix\n    this.persistence = persistence\n  }\n\n  getItem(key: string) {\n    return this.persistence.getItem(this.buildKey(key))\n  }\n\n  setItem(key: string, value: Uint8Array) {\n    return this.persistence.setItem(this.buildKey(key), value)\n  }\n\n  private buildKey(key: string) {\n    return this.prefix + key\n  }\n}\n","import { Persistence } from './interface'\nimport { Ecies, getPublic, encrypt, decrypt } from '../../crypto/ecies'\nimport {\n  PrivateKey,\n  SignedEciesCiphertext,\n  SignedPrivateKey,\n} from '../../crypto'\n\n/**\n * EncryptedPersistence is a Persistence implementation that uses ECIES to encrypt all values\n * ECIES encryption protects against unauthorized reads, but not unauthorized writes.\n * A third party with access to the underlying store could write malicious data using the public key of the owner\n */\nexport default class EncryptedPersistence implements Persistence {\n  private persistence: Persistence\n  private privateKey: PrivateKey | SignedPrivateKey\n  private privateKeyBytes: Buffer\n  private publicKey: Buffer\n\n  constructor(\n    persistence: Persistence,\n    privateKey: PrivateKey | SignedPrivateKey\n  ) {\n    this.persistence = persistence\n    this.privateKey = privateKey\n    this.privateKeyBytes = Buffer.from(privateKey.secp256k1.bytes)\n    this.publicKey = getPublic(this.privateKeyBytes)\n  }\n\n  async getItem(key: string): Promise<Uint8Array | null> {\n    const encrypted = await this.persistence.getItem(key)\n    if (encrypted) {\n      return this.decrypt(encrypted)\n    }\n    return null\n  }\n\n  async setItem(key: string, value: Uint8Array): Promise<void> {\n    const encrypted = await this.encrypt(value)\n    await this.persistence.setItem(key, encrypted)\n  }\n\n  private async encrypt(value: Uint8Array): Promise<Uint8Array> {\n    const ecies = await encrypt(this.publicKey, Buffer.from(value))\n    return this.serializeEcies(ecies)\n  }\n\n  private async decrypt(value: Uint8Array): Promise<Uint8Array> {\n    const ecies = await this.deserializeEcies(value)\n    const result = await decrypt(this.privateKeyBytes, ecies)\n    return Uint8Array.from(result)\n  }\n\n  private async serializeEcies(data: Ecies): Promise<Uint8Array> {\n    // This will create and sign a `SignedEciesCiphertext` payload based on the provided data\n    const protoVal = await SignedEciesCiphertext.create(data, this.privateKey)\n    return protoVal.toBytes()\n  }\n\n  private async deserializeEcies(data: Uint8Array): Promise<Ecies> {\n    const protoVal = SignedEciesCiphertext.fromBytes(data)\n    // Verify the signature upon deserializing\n    if (!(await protoVal.verify(this.privateKey.publicKey))) {\n      throw new Error('signature validation failed')\n    }\n    const ecies = protoVal.ciphertext\n\n    return {\n      ciphertext: Buffer.from(ecies.ciphertext),\n      mac: Buffer.from(ecies.mac),\n      iv: Buffer.from(ecies.iv),\n      ephemeralPublicKey: Buffer.from(ecies.ephemeralPublicKey),\n    }\n  }\n}\n","import { PrivateKeyBundleV2 } from './../../crypto/PrivateKeyBundle'\nimport { PrivateKeyBundleV1 } from '../../crypto/PrivateKeyBundle'\nimport {\n  EncryptedPersistence,\n  LocalStoragePersistence,\n  PrefixedPersistence,\n} from '../persistence'\nimport { KeystoreProviderOptions } from './interfaces'\n\nexport const buildPersistenceFromOptions = async (\n  opts: KeystoreProviderOptions,\n  keys: PrivateKeyBundleV1 | PrivateKeyBundleV2\n) => {\n  if (!opts.persistConversations) {\n    return undefined\n  }\n  const address = await keys.identityKey.publicKey.walletSignatureAddress()\n  const prefix = `xmtp/${opts.env}/${address}/`\n\n  return new PrefixedPersistence(\n    prefix,\n    new EncryptedPersistence(new LocalStoragePersistence(), keys.identityKey)\n  )\n}\n","import { utils } from 'ethers'\nimport { Signer } from '../../types/Signer'\nimport crypto from '../../crypto/crypto'\nimport {\n  PrivateKeyBundleV1,\n  decodePrivateKeyBundle,\n  decrypt,\n  encrypt,\n  PrivateKeyBundleV2,\n} from '../../crypto'\nimport type { PreEventCallback } from '../../Client'\nimport { LocalAuthenticator } from '../../authn'\nimport { bytesToHex, hexToBytes } from '../../crypto/utils'\nimport Ciphertext from '../../crypto/Ciphertext'\nimport { privateKey as proto } from '@xmtp/proto'\nimport TopicPersistence from '../persistence/TopicPersistence'\n\nconst KEY_BUNDLE_NAME = 'key_bundle'\n/**\n * EncryptedKeyStore wraps Store to enable encryption of private key bundles\n * using a wallet signature.\n */\nexport default class NetworkKeyManager {\n  private persistence: TopicPersistence\n  private signer: Signer\n  private preEnableIdentityCallback?: PreEventCallback\n\n  constructor(\n    signer: Signer,\n    persistence: TopicPersistence,\n    preEnableIdentityCallback?: PreEventCallback\n  ) {\n    this.signer = signer\n    this.persistence = persistence\n    this.preEnableIdentityCallback = preEnableIdentityCallback\n  }\n\n  private async getStorageAddress(name: string): Promise<string> {\n    // I think we want to namespace the storage address by wallet\n    // This will allow us to support switching between multiple wallets in the same browser\n    let walletAddress = await this.signer.getAddress()\n    walletAddress = utils.getAddress(walletAddress)\n    return `${walletAddress}/${name}`\n  }\n\n  // Retrieve a private key bundle for the active wallet address in the signer\n  async loadPrivateKeyBundle(): Promise<PrivateKeyBundleV1 | null> {\n    const storageBuffer = await this.persistence.getItem(\n      await this.getStorageAddress(KEY_BUNDLE_NAME)\n    )\n    if (!storageBuffer) {\n      return null\n    }\n\n    const [bundle, needsUpdate] = await this.fromEncryptedBytes(\n      this.signer,\n      Uint8Array.from(storageBuffer)\n    )\n    // If a versioned bundle is not found, the legacy bundle needs to be resaved to the store in\n    // the new format. Once all bundles have been upgraded, this migration code can be removed.\n    if (needsUpdate) {\n      await this.storePrivateKeyBundle(bundle)\n    }\n    return bundle\n  }\n\n  // Store the private key bundle at an address generated based on the active wallet in the signer\n  async storePrivateKeyBundle(bundle: PrivateKeyBundleV1): Promise<void> {\n    const keyAddress = await this.getStorageAddress(KEY_BUNDLE_NAME)\n    const encodedBundle = await this.toEncryptedBytes(bundle, this.signer)\n    // We need to setup the Authenticator so that the underlying store can publish messages without error\n    if (typeof this.persistence.setAuthenticator === 'function') {\n      this.persistence.setAuthenticator(\n        new LocalAuthenticator(bundle.identityKey)\n      )\n    }\n\n    await this.persistence.setItem(keyAddress, encodedBundle)\n  }\n\n  // encrypts/serializes the bundle for storage\n  async toEncryptedBytes(\n    bundle: PrivateKeyBundleV1,\n    wallet: Signer\n  ): Promise<Uint8Array> {\n    // serialize the contents\n    const bytes = bundle.encode()\n    const wPreKey = crypto.getRandomValues(new Uint8Array(32))\n    const input = storageSigRequestText(wPreKey)\n    const walletAddr = await wallet.getAddress()\n    if (this.preEnableIdentityCallback) {\n      await this.preEnableIdentityCallback()\n    }\n    let sig = await wallet.signMessage(input)\n\n    // Check that the signature is correct, was created using the expected\n    // input, and retry if not. This mitigates a bug in interacting with\n    // LedgerLive for iOS, where the previous signature response is\n    // returned in some cases.\n    let address = utils.verifyMessage(input, sig)\n    if (address !== walletAddr) {\n      sig = await wallet.signMessage(input)\n      console.log('invalid signature, retrying')\n\n      address = utils.verifyMessage(input, sig)\n      if (address !== walletAddr) {\n        throw new Error('invalid signature')\n      }\n    }\n\n    const secret = hexToBytes(sig)\n    const ciphertext = await encrypt(bytes, secret)\n    return proto.EncryptedPrivateKeyBundle.encode({\n      v1: {\n        walletPreKey: wPreKey,\n        ciphertext,\n      },\n    }).finish()\n  }\n\n  // decrypts/deserializes the bundle from storage bytes\n  async fromEncryptedBytes(\n    wallet: Signer,\n    bytes: Uint8Array\n  ): Promise<[PrivateKeyBundleV1, boolean]> {\n    const [eBundle, needsUpdate] = getEncryptedBundle(bytes)\n\n    if (!eBundle.walletPreKey) {\n      throw new Error('missing wallet pre-key')\n    }\n    if (!eBundle.ciphertext?.aes256GcmHkdfSha256) {\n      throw new Error('missing bundle ciphertext')\n    }\n\n    if (this.preEnableIdentityCallback) {\n      await this.preEnableIdentityCallback()\n    }\n    const secret = hexToBytes(\n      await wallet.signMessage(storageSigRequestText(eBundle.walletPreKey))\n    )\n\n    // Ledger uses the last byte = v=[0,1,...] but Metamask and other wallets generate with\n    // v+27 as the last byte. We need to support both for interoperability. Doing this\n    // on the decryption side provides an immediate retroactive fix.\n    // Ledger is using the canonical way, whereas Ethereum adds 27 due to some legacy stuff\n    // https://github.com/ethereum/go-ethereum/issues/19751#issuecomment-504900739\n    try {\n      // Try the original version of the signature first\n      const ciphertext = new Ciphertext(eBundle.ciphertext)\n      const decrypted = await decrypt(ciphertext, secret)\n      const [bundle, needsUpdate2] = getPrivateBundle(decrypted)\n      return [bundle, needsUpdate || needsUpdate2]\n    } catch (e) {\n      // Assert that the secret is length 65 (encoded signature + recovery byte)\n      if (secret.length !== 65) {\n        throw new Error(\n          'Expected 65 bytes before trying a different recovery byte'\n        )\n      }\n      // Try the other version of recovery byte, either +27 or -27\n      const lastByte = secret[secret.length - 1]\n      let newSecret = secret.slice(0, secret.length - 1)\n      if (lastByte < 27) {\n        // This is a canonical signature, so we need to add 27 to the recovery byte and try again\n        newSecret = new Uint8Array([...newSecret, lastByte + 27])\n      } else {\n        // This canocalizes v to 0 or 1 (or maybe 2 or 3 but very unlikely)\n        newSecret = new Uint8Array([...newSecret, lastByte - 27])\n      }\n      const ciphertext = new Ciphertext(eBundle.ciphertext)\n      const decrypted = await decrypt(ciphertext, newSecret)\n      const [bundle, needsUpdate2] = getPrivateBundle(decrypted)\n      return [bundle, needsUpdate || needsUpdate2]\n    }\n  }\n}\n\n// getEncryptedV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts\n// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.\nfunction getEncryptedBundle(\n  bytes: Uint8Array\n): [proto.EncryptedPrivateKeyBundleV1, boolean] {\n  try {\n    const b = proto.EncryptedPrivateKeyBundle.decode(bytes)\n    if (b.v1) {\n      return [b.v1, false]\n    }\n  } catch (e) {\n    return [proto.EncryptedPrivateKeyBundleV1.decode(bytes), true]\n  }\n  throw new Error('unrecognized encrypted private key bundle version')\n}\n\n// getPrivateV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts\n// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.\nfunction getPrivateBundle(bytes: Uint8Array): [PrivateKeyBundleV1, boolean] {\n  try {\n    // TODO: add support for V2\n    const b = decodePrivateKeyBundle(bytes)\n    if (b instanceof PrivateKeyBundleV2) {\n      throw new Error('V2 bundles not supported yet')\n    }\n    return [b, false]\n  } catch (e) {\n    // Adds a default fallback for older versions of the proto\n    const b = proto.PrivateKeyBundleV1.decode(bytes)\n    return [new PrivateKeyBundleV1(b), true]\n  }\n}\n\nexport function storageSigRequestText(preKey: Uint8Array): string {\n  // Note that an update to this signature request text will require\n  // addition of backward compatibility for existing encrypted bundles\n  // and/or a migration; otherwise clients will no longer be able to\n  // decrypt those bundles.\n  return (\n    'XMTP : Enable Identity\\n' +\n    `${bytesToHex(preKey)}\\n` +\n    '\\n' +\n    'For more info: https://xmtp.org/signatures/'\n  )\n}\n","import ApiClient from '../../ApiClient'\nimport { PrivateKeyBundleV1 } from '../../crypto'\nimport InMemoryKeystore from '../InMemoryKeystore'\nimport TopicPersistence from '../persistence/TopicPersistence'\nimport { KeystoreProviderUnavailableError } from './errors'\nimport { buildPersistenceFromOptions } from './helpers'\nimport NetworkKeyManager from './NetworkKeyManager'\nimport type { Signer } from '../../types/Signer'\nimport type { Keystore } from '../interfaces'\nimport type { KeystoreProvider, KeystoreProviderOptions } from './interfaces'\n\n/**\n * KeyGeneratorKeystoreProvider will create a new XMTP `PrivateKeyBundle` and persist it to the network\n * This provider should always be specified last in the list of `keystoreProviders` on client creation,\n * as it will overwrite any XMTP identities already on the network\n */\nexport default class KeyGeneratorKeystoreProvider implements KeystoreProvider {\n  async newKeystore(\n    opts: KeystoreProviderOptions,\n    apiClient: ApiClient,\n    wallet?: Signer\n  ): Promise<Keystore> {\n    if (!wallet) {\n      throw new KeystoreProviderUnavailableError(\n        'Wallet required to generate new keys'\n      )\n    }\n    if (opts.preCreateIdentityCallback) {\n      await opts.preCreateIdentityCallback()\n    }\n    const bundle = await PrivateKeyBundleV1.generate(wallet)\n    const manager = new NetworkKeyManager(\n      wallet,\n      new TopicPersistence(apiClient),\n      opts.preEnableIdentityCallback\n    )\n    await manager.storePrivateKeyBundle(bundle)\n\n    return InMemoryKeystore.create(\n      bundle,\n      await buildPersistenceFromOptions(opts, bundle)\n    )\n  }\n}\n","import { Signer } from './../../types/Signer'\nimport ApiClient from '../../ApiClient'\nimport { KeystoreProvider, KeystoreProviderOptions } from './interfaces'\nimport NetworkKeyLoader from './NetworkKeyManager'\nimport { KeystoreProviderUnavailableError } from './errors'\nimport TopicPersistence from '../persistence/TopicPersistence'\nimport { Keystore } from '../interfaces'\nimport InMemoryKeystore from '../InMemoryKeystore'\nimport { buildPersistenceFromOptions } from './helpers'\n\n/**\n * NetworkKeystoreProvider will look on the XMTP network for an `EncryptedPrivateKeyBundle`\n * on the user's private storage topic. If found, will decrypt the bundle using a wallet\n * signature and instantiate a Keystore instance using the decrypted value.\n */\nexport default class NetworkKeystoreProvider implements KeystoreProvider {\n  async newKeystore(\n    opts: KeystoreProviderOptions,\n    apiClient: ApiClient,\n    wallet?: Signer\n  ): Promise<Keystore> {\n    if (!wallet) {\n      throw new KeystoreProviderUnavailableError('No wallet provided')\n    }\n\n    const loader = new NetworkKeyLoader(\n      wallet,\n      new TopicPersistence(apiClient),\n      opts.preEnableIdentityCallback\n    )\n    const keys = await loader.loadPrivateKeyBundle()\n    if (!keys) {\n      throw new KeystoreProviderUnavailableError('No keys found')\n    }\n\n    return InMemoryKeystore.create(\n      keys,\n      await buildPersistenceFromOptions(opts, keys)\n    )\n  }\n}\n","import { KeystoreProviderUnavailableError } from './errors'\nimport { Keystore } from '../interfaces'\nimport type { KeystoreProvider, KeystoreProviderOptions } from './interfaces'\nimport InMemoryKeystore from '../InMemoryKeystore'\nimport {\n  decodePrivateKeyBundle,\n  PrivateKeyBundleV2,\n} from '../../crypto/PrivateKeyBundle'\nimport { buildPersistenceFromOptions } from './helpers'\n\n/**\n * StaticKeystoreProvider will look for a `privateKeyOverride` in the provided options,\n * and bootstrap a Keystore using those options if provided.\n *\n * If no `privateKeyOverride` is supplied will throw a `KeystoreProviderUnavailableError` causing\n * the client to continue iterating through the `KeystoreProviders` list.\n */\nexport default class StaticKeystoreProvider implements KeystoreProvider {\n  async newKeystore(opts: KeystoreProviderOptions): Promise<Keystore> {\n    const { privateKeyOverride } = opts\n    if (!privateKeyOverride) {\n      throw new KeystoreProviderUnavailableError(\n        'No private key override provided'\n      )\n    }\n\n    const bundle = decodePrivateKeyBundle(privateKeyOverride)\n    if (bundle instanceof PrivateKeyBundleV2) {\n      throw new Error('V2 private key bundle found. Only V1 supported')\n    }\n\n    return InMemoryKeystore.create(\n      bundle,\n      await buildPersistenceFromOptions(opts, bundle)\n    )\n  }\n}\n","import { ContentTypeId, ContentCodec, EncodedContent } from '../MessageContent'\n\n// xmtp.org/typingNotification\n//\n// This content type is used for typing notifications\nexport const ContentTypeTypingNotification = new ContentTypeId({\n  authorityId: 'xmtp.com',\n  typeId: 'typingNotification',\n  versionMajor: 1,\n  versionMinor: 0,\n})\n\nexport type TypingNotification = {\n  timestamp: Date\n  typerAddress: string\n  isFinished: boolean\n}\n\n// Important: Typing Notifications should only be sent on ephemeral topics.\nexport class TypingNotificationCodec\n  implements ContentCodec<TypingNotification>\n{\n  get contentType(): ContentTypeId {\n    return ContentTypeTypingNotification\n  }\n\n  encode(content: TypingNotification): EncodedContent {\n    return {\n      type: ContentTypeTypingNotification,\n      parameters: {\n        timestamp: content.timestamp.toISOString(),\n        typerAddress: content.typerAddress,\n        isFinished: content.isFinished ? 'true' : 'false',\n      },\n      content: new Uint8Array(),\n    }\n  }\n\n  decode(content: EncodedContent): TypingNotification {\n    const timestamp = new Date(content.parameters.timestamp)\n    const typerAddress = content.parameters.senderAddress\n    const isFinished = content.parameters.isFinished === 'true'\n\n    return {\n      timestamp,\n      typerAddress,\n      isFinished,\n    }\n  }\n}\n","/* eslint-disable camelcase */\nimport {\n  ContentTypeId,\n  ContentCodec,\n  EncodedContent,\n  CodecRegistry,\n} from '../MessageContent'\nimport { composite as proto } from '@xmtp/proto'\n\n// xmtp.org/composite\n//\n// Composite is a generic sequence of multiple parts of arbitrary content type.\n// It can be nested arbitrarily (composite of composites).\n\nexport const ContentTypeComposite = new ContentTypeId({\n  authorityId: 'xmtp.org',\n  typeId: 'composite',\n  versionMajor: 1,\n  versionMinor: 0,\n})\n\n// Composite type defines the expected structure of values\n// that can be processed by the CompositeCodec\nexport type Composite =\n  | {\n      type: ContentTypeId\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      content: any\n    }\n  | { parts: Composite[] }\n\n// CompositeCodec implements encoding/decoding of Composite values.\n// Register this codec with the Client if you want support for Composite content.\nexport class CompositeCodec implements ContentCodec<Composite> {\n  get contentType(): ContentTypeId {\n    return ContentTypeComposite\n  }\n\n  encode(content: Composite, codecs: CodecRegistry): EncodedContent {\n    const part = this.toProto(content, codecs)\n    let composite: proto.Composite\n    if (part.composite) {\n      composite = part.composite\n    } else {\n      composite = { parts: [part] }\n    }\n    const bytes = proto.Composite.encode(composite).finish()\n    return {\n      type: ContentTypeComposite,\n      parameters: {},\n      content: bytes,\n    }\n  }\n\n  decode(content: EncodedContent, codecs: CodecRegistry): Composite {\n    return this.fromProto(\n      { composite: proto.Composite.decode(content.content), part: undefined },\n      codecs\n    )\n  }\n\n  private toProto(\n    content: Composite,\n    codecs: CodecRegistry\n  ): proto.Composite_Part {\n    if ('type' in content) {\n      const codec = codecs.codecFor(content.type)\n      if (!codec) {\n        throw new Error(`missing codec for part type ${content.type}`)\n      }\n      return {\n        part: codec.encode(content.content, codecs),\n        composite: undefined,\n      }\n    }\n    const parts = new Array<proto.Composite_Part>()\n    for (const part of content.parts) {\n      parts.push(this.toProto(part, codecs))\n    }\n    return { composite: { parts }, part: undefined }\n  }\n\n  private fromProto(\n    content: proto.Composite_Part,\n    codecs: CodecRegistry\n  ): Composite {\n    if (content.part) {\n      if (!content.part.type) {\n        throw new Error('missing part content type')\n      }\n      const contentType = new ContentTypeId(content.part.type)\n      const codec = codecs.codecFor(contentType)\n      if (!codec) {\n        throw new Error(`missing codec for part type ${contentType}`)\n      }\n      return {\n        type: contentType,\n        content: codec.decode(content.part as EncodedContent, codecs),\n      }\n    }\n    if (!content.composite) {\n      throw new Error('invalid composite')\n    }\n    const parts = new Array<Composite>()\n    for (const part of content.composite.parts) {\n      parts.push(this.fromProto(part, codecs))\n    }\n    return { parts }\n  }\n}\n"]}