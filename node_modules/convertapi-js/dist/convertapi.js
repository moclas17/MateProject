import Params from "./params.js";
import Result from "./result.js";
export default class ConvertApi {
    constructor(credentials, host = 'v2.convertapi.com') {
        this.credentials = credentials;
        this.host = host;
    }
    static auth(credentials, host) {
        return new ConvertApi(credentials, host);
    }
    createParams(init) {
        return new Params(this.host, init);
    }
    convert(fromFormat, toFormat, params) {
        return Promise.resolve(params.dto)
            .then(dto => {
            let altConvParam = dto.Parameters.filter(p => p.Name.toLowerCase() == 'converter');
            let converterPath = (altConvParam === null || altConvParam === void 0 ? void 0 : altConvParam.length) > 0 ? `/converter/${altConvParam[0].Value}` : '';
            let auth = typeof this.credentials === 'string' ? `secret=${this.credentials}` : `apikey=${this.credentials.apiKey}&token=${this.credentials.token}`;
            return fetch(`https://${this.host}/convert/${fromFormat}/to/${toFormat}${converterPath}?${auth}&storefile=true`, { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify(dto) })
                .then(r => Promise.all([r.ok, r.json()]))
                .then(([ok, o]) => ok ? o : Promise.reject(o))
                .then(dto => new Result(dto));
        });
    }
}
//# sourceMappingURL=convertapi.js.map